#45 CLASS class
#45 TYPEID Board
#45 INHERITS inherits
#45 TYPEID IO
#45 CURLY_OPEN {
#47 OBJECTID rows
#47 COLON :
#47 TYPEID Int
#47 SEMICOLON ;
#48 OBJECTID columns
#48 COLON :
#48 TYPEID Int
#48 SEMICOLON ;
#49 OBJECTID board_size
#49 COLON :
#49 TYPEID Int
#49 SEMICOLON ;
#51 OBJECTID size_of_board
#51 PARENT_OPEN (
#51 OBJECTID initial
#51 COLON :
#51 TYPEID String
#51 PARENT_CLOSE )
#51 COLON :
#51 TYPEID Int
#51 CURLY_OPEN {
#52 OBJECTID initial
#52 PERIOD .
#52 OBJECTID length
#52 PARENT_OPEN (
#52 PARENT_CLOSE )
#53 CURLY_CLOSE }
#53 SEMICOLON ;
#55 OBJECTID board_init
#55 PARENT_OPEN (
#55 OBJECTID start
#55 COLON :
#55 TYPEID String
#55 PARENT_CLOSE )
#55 COLON :
#55 TYPEID SELF_TYPE
#55 CURLY_OPEN {
#56 PARENT_OPEN (
#56 LET let
#56 OBJECTID size
#56 COLON :
#56 TYPEID Int
#56 ASSIGN_OPERATOR <-
#56 OBJECTID size_of_board
#56 PARENT_OPEN (
#56 OBJECTID start
#56 PARENT_CLOSE )
#56 IN in
#57 CURLY_OPEN {
#58 IF if
#58 OBJECTID size
#58 EQ_OPERATOR =
#58 INT_CONST 15
#58 THEN then
#59 CURLY_OPEN {
#60 OBJECTID rows
#60 ASSIGN_OPERATOR <-
#60 INT_CONST 3
#60 SEMICOLON ;
#61 OBJECTID columns
#61 ASSIGN_OPERATOR <-
#61 INT_CONST 5
#61 SEMICOLON ;
#62 OBJECTID board_size
#62 ASSIGN_OPERATOR <-
#62 OBJECTID size
#62 SEMICOLON ;
#63 CURLY_CLOSE }
#64 ELSE else
#64 IF if
#64 OBJECTID size
#64 EQ_OPERATOR =
#64 INT_CONST 16
#64 THEN then
#65 CURLY_OPEN {
#66 OBJECTID rows
#66 ASSIGN_OPERATOR <-
#66 INT_CONST 4
#66 SEMICOLON ;
#67 OBJECTID columns
#67 ASSIGN_OPERATOR <-
#67 INT_CONST 4
#67 SEMICOLON ;
#68 OBJECTID board_size
#68 ASSIGN_OPERATOR <-
#68 OBJECTID size
#68 SEMICOLON ;
#69 CURLY_CLOSE }
#70 ELSE else
#70 IF if
#70 OBJECTID size
#70 EQ_OPERATOR =
#70 INT_CONST 20
#70 THEN then
#71 CURLY_OPEN {
#72 OBJECTID rows
#72 ASSIGN_OPERATOR <-
#72 INT_CONST 4
#72 SEMICOLON ;
#73 OBJECTID columns
#73 ASSIGN_OPERATOR <-
#73 INT_CONST 5
#73 SEMICOLON ;
#74 OBJECTID board_size
#74 ASSIGN_OPERATOR <-
#74 OBJECTID size
#74 SEMICOLON ;
#75 CURLY_CLOSE }
#76 ELSE else
#76 IF if
#76 OBJECTID size
#76 EQ_OPERATOR =
#76 INT_CONST 21
#76 THEN then
#77 CURLY_OPEN {
#78 OBJECTID rows
#78 ASSIGN_OPERATOR <-
#78 INT_CONST 3
#78 SEMICOLON ;
#79 OBJECTID columns
#79 ASSIGN_OPERATOR <-
#79 INT_CONST 7
#79 SEMICOLON ;
#80 OBJECTID board_size
#80 ASSIGN_OPERATOR <-
#80 OBJECTID size
#80 SEMICOLON ;
#81 CURLY_CLOSE }
#82 ELSE else
#82 IF if
#82 OBJECTID size
#82 EQ_OPERATOR =
#82 INT_CONST 25
#82 THEN then
#83 CURLY_OPEN {
#84 OBJECTID rows
#84 ASSIGN_OPERATOR <-
#84 INT_CONST 5
#84 SEMICOLON ;
#85 OBJECTID columns
#85 ASSIGN_OPERATOR <-
#85 INT_CONST 5
#85 SEMICOLON ;
#86 OBJECTID board_size
#86 ASSIGN_OPERATOR <-
#86 OBJECTID size
#86 SEMICOLON ;
#87 CURLY_CLOSE }
#88 ELSE else
#88 IF if
#88 OBJECTID size
#88 EQ_OPERATOR =
#88 INT_CONST 28
#88 THEN then
#89 CURLY_OPEN {
#90 OBJECTID rows
#90 ASSIGN_OPERATOR <-
#90 INT_CONST 7
#90 SEMICOLON ;
#91 OBJECTID columns
#91 ASSIGN_OPERATOR <-
#91 INT_CONST 4
#91 SEMICOLON ;
#92 OBJECTID board_size
#92 ASSIGN_OPERATOR <-
#92 OBJECTID size
#92 SEMICOLON ;
#93 CURLY_CLOSE }
#94 ELSE else
#95 CURLY_OPEN {
#96 OBJECTID rows
#96 ASSIGN_OPERATOR <-
#96 INT_CONST 5
#96 SEMICOLON ;
#97 OBJECTID columns
#97 ASSIGN_OPERATOR <-
#97 INT_CONST 5
#97 SEMICOLON ;
#98 OBJECTID board_size
#98 ASSIGN_OPERATOR <-
#98 OBJECTID size
#98 SEMICOLON ;
#99 CURLY_CLOSE }
#100 FI fi
#100 FI fi
#100 FI fi
#100 FI fi
#100 FI fi
#100 FI fi
#100 SEMICOLON ;
#101 OBJECTID self
#101 SEMICOLON ;
#102 CURLY_CLOSE }
#103 PARENT_CLOSE )
#104 CURLY_CLOSE }
#104 SEMICOLON ;
#106 CURLY_CLOSE }
#106 SEMICOLON ;
#110 CLASS class
#110 TYPEID CellularAutomaton
#110 INHERITS inherits
#110 TYPEID Board
#110 CURLY_OPEN {
#111 OBJECTID population_map
#111 COLON :
#111 TYPEID String
#111 SEMICOLON ;
#113 OBJECTID init
#113 PARENT_OPEN (
#113 OBJECTID map
#113 COLON :
#113 TYPEID String
#113 PARENT_CLOSE )
#113 COLON :
#113 TYPEID SELF_TYPE
#113 CURLY_OPEN {
#114 CURLY_OPEN {
#115 OBJECTID population_map
#115 ASSIGN_OPERATOR <-
#115 OBJECTID map
#115 SEMICOLON ;
#116 OBJECTID board_init
#116 PARENT_OPEN (
#116 OBJECTID map
#116 PARENT_CLOSE )
#116 SEMICOLON ;
#117 OBJECTID self
#117 SEMICOLON ;
#118 CURLY_CLOSE }
#119 CURLY_CLOSE }
#119 SEMICOLON ;
#124 OBJECTID print
#124 PARENT_OPEN (
#124 PARENT_CLOSE )
#124 COLON :
#124 TYPEID SELF_TYPE
#124 CURLY_OPEN {
#126 PARENT_OPEN (
#126 LET let
#126 OBJECTID i
#126 COLON :
#126 TYPEID Int
#126 ASSIGN_OPERATOR <-
#126 INT_CONST 0
#126 IN in
#127 PARENT_OPEN (
#127 LET let
#127 OBJECTID num
#127 COLON :
#127 TYPEID Int
#127 ASSIGN_OPERATOR <-
#127 OBJECTID board_size
#127 IN in
#128 CURLY_OPEN {
#129 OBJECTID out_string
#129 PARENT_OPEN (
#129 STRING_CONST 

#129 PARENT_CLOSE )
#129 SEMICOLON ;
#130 WHILE while
#130 OBJECTID i
#130 LESS_OPERATOR <
#130 OBJECTID num
#130 LOOP loop
#131 CURLY_OPEN {
#132 OBJECTID out_string
#132 PARENT_OPEN (
#132 OBJECTID population_map
#132 PERIOD .
#132 OBJECTID substr
#132 PARENT_OPEN (
#132 OBJECTID i
#132 COMMA ,
#132 OBJECTID columns
#132 PARENT_CLOSE )
#132 PARENT_CLOSE )
#132 SEMICOLON ;
#133 OBJECTID out_string
#133 PARENT_OPEN (
#133 STRING_CONST 

#133 PARENT_CLOSE )
#133 SEMICOLON ;
#134 OBJECTID i
#134 ASSIGN_OPERATOR <-
#134 OBJECTID i
#134 PLUS_OPERATOR +
#134 OBJECTID columns
#134 SEMICOLON ;
#135 CURLY_CLOSE }
#136 POOL pool
#136 SEMICOLON ;
#137 OBJECTID out_string
#137 PARENT_OPEN (
#137 STRING_CONST 

#137 PARENT_CLOSE )
#137 SEMICOLON ;
#138 OBJECTID self
#138 SEMICOLON ;
#139 CURLY_CLOSE }
#140 PARENT_CLOSE )
#140 PARENT_CLOSE )
#141 CURLY_CLOSE }
#141 SEMICOLON ;
#143 OBJECTID num_cells
#143 PARENT_OPEN (
#143 PARENT_CLOSE )
#143 COLON :
#143 TYPEID Int
#143 CURLY_OPEN {
#144 OBJECTID population_map
#144 PERIOD .
#144 OBJECTID length
#144 PARENT_OPEN (
#144 PARENT_CLOSE )
#145 CURLY_CLOSE }
#145 SEMICOLON ;
#147 OBJECTID cell
#147 PARENT_OPEN (
#147 OBJECTID position
#147 COLON :
#147 TYPEID Int
#147 PARENT_CLOSE )
#147 COLON :
#147 TYPEID String
#147 CURLY_OPEN {
#148 IF if
#148 OBJECTID board_size
#148 MINUS_OPERATOR -
#148 INT_CONST 1
#148 LESS_OPERATOR <
#148 OBJECTID position
#148 THEN then
#149 STRING_CONST  
#150 ELSE else
#151 OBJECTID population_map
#151 PERIOD .
#151 OBJECTID substr
#151 PARENT_OPEN (
#151 OBJECTID position
#151 COMMA ,
#151 INT_CONST 1
#151 PARENT_CLOSE )
#152 FI fi
#153 CURLY_CLOSE }
#153 SEMICOLON ;
#155 OBJECTID north
#155 PARENT_OPEN (
#155 OBJECTID position
#155 COLON :
#155 TYPEID Int
#155 PARENT_CLOSE )
#155 COLON :
#155 TYPEID String
#155 CURLY_OPEN {
#156 IF if
#156 PARENT_OPEN (
#156 OBJECTID position
#156 MINUS_OPERATOR -
#156 OBJECTID columns
#156 PARENT_CLOSE )
#156 LESS_OPERATOR <
#156 INT_CONST 0
#156 THEN then
#157 STRING_CONST  
#158 ELSE else
#159 OBJECTID cell
#159 PARENT_OPEN (
#159 OBJECTID position
#159 MINUS_OPERATOR -
#159 OBJECTID columns
#159 PARENT_CLOSE )
#160 FI fi
#161 CURLY_CLOSE }
#161 SEMICOLON ;
#163 OBJECTID south
#163 PARENT_OPEN (
#163 OBJECTID position
#163 COLON :
#163 TYPEID Int
#163 PARENT_CLOSE )
#163 COLON :
#163 TYPEID String
#163 CURLY_OPEN {
#164 IF if
#164 OBJECTID board_size
#164 LESS_OPERATOR <
#164 PARENT_OPEN (
#164 OBJECTID position
#164 PLUS_OPERATOR +
#164 OBJECTID columns
#164 PARENT_CLOSE )
#164 THEN then
#165 STRING_CONST  
#166 ELSE else
#167 OBJECTID cell
#167 PARENT_OPEN (
#167 OBJECTID position
#167 PLUS_OPERATOR +
#167 OBJECTID columns
#167 PARENT_CLOSE )
#168 FI fi
#169 CURLY_CLOSE }
#169 SEMICOLON ;
#171 OBJECTID east
#171 PARENT_OPEN (
#171 OBJECTID position
#171 COLON :
#171 TYPEID Int
#171 PARENT_CLOSE )
#171 COLON :
#171 TYPEID String
#171 CURLY_OPEN {
#172 IF if
#172 PARENT_OPEN (
#172 PARENT_OPEN (
#172 PARENT_OPEN (
#172 OBJECTID position
#172 PLUS_OPERATOR +
#172 INT_CONST 1
#172 PARENT_CLOSE )
#172 DIV_OPERATOR /
#172 OBJECTID columns
#172 PARENT_CLOSE )
#172 MULT_OPERATOR *
#172 OBJECTID columns
#172 PARENT_CLOSE )
#172 EQ_OPERATOR =
#172 PARENT_OPEN (
#172 OBJECTID position
#172 PLUS_OPERATOR +
#172 INT_CONST 1
#172 PARENT_CLOSE )
#172 THEN then
#173 STRING_CONST  
#174 ELSE else
#175 OBJECTID cell
#175 PARENT_OPEN (
#175 OBJECTID position
#175 PLUS_OPERATOR +
#175 INT_CONST 1
#175 PARENT_CLOSE )
#176 FI fi
#177 CURLY_CLOSE }
#177 SEMICOLON ;
#179 OBJECTID west
#179 PARENT_OPEN (
#179 OBJECTID position
#179 COLON :
#179 TYPEID Int
#179 PARENT_CLOSE )
#179 COLON :
#179 TYPEID String
#179 CURLY_OPEN {
#180 IF if
#180 OBJECTID position
#180 EQ_OPERATOR =
#180 INT_CONST 0
#180 THEN then
#181 STRING_CONST  
#182 ELSE else
#183 IF if
#183 PARENT_OPEN (
#183 PARENT_OPEN (
#183 OBJECTID position
#183 DIV_OPERATOR /
#183 OBJECTID columns
#183 PARENT_CLOSE )
#183 MULT_OPERATOR *
#183 OBJECTID columns
#183 PARENT_CLOSE )
#183 EQ_OPERATOR =
#183 OBJECTID position
#183 THEN then
#184 STRING_CONST  
#185 ELSE else
#186 OBJECTID cell
#186 PARENT_OPEN (
#186 OBJECTID position
#186 MINUS_OPERATOR -
#186 INT_CONST 1
#186 PARENT_CLOSE )
#187 FI fi
#187 FI fi
#188 CURLY_CLOSE }
#188 SEMICOLON ;
#190 OBJECTID northwest
#190 PARENT_OPEN (
#190 OBJECTID position
#190 COLON :
#190 TYPEID Int
#190 PARENT_CLOSE )
#190 COLON :
#190 TYPEID String
#190 CURLY_OPEN {
#191 IF if
#191 PARENT_OPEN (
#191 OBJECTID position
#191 MINUS_OPERATOR -
#191 OBJECTID columns
#191 PARENT_CLOSE )
#191 LESS_OPERATOR <
#191 INT_CONST 0
#191 THEN then
#192 STRING_CONST  
#193 ELSE else
#193 IF if
#193 PARENT_OPEN (
#193 PARENT_OPEN (
#193 OBJECTID position
#193 DIV_OPERATOR /
#193 OBJECTID columns
#193 PARENT_CLOSE )
#193 MULT_OPERATOR *
#193 OBJECTID columns
#193 PARENT_CLOSE )
#193 EQ_OPERATOR =
#193 OBJECTID position
#193 THEN then
#194 STRING_CONST  
#195 ELSE else
#196 OBJECTID north
#196 PARENT_OPEN (
#196 OBJECTID position
#196 MINUS_OPERATOR -
#196 INT_CONST 1
#196 PARENT_CLOSE )
#197 FI fi
#197 FI fi
#198 CURLY_CLOSE }
#198 SEMICOLON ;
#200 OBJECTID northeast
#200 PARENT_OPEN (
#200 OBJECTID position
#200 COLON :
#200 TYPEID Int
#200 PARENT_CLOSE )
#200 COLON :
#200 TYPEID String
#200 CURLY_OPEN {
#201 IF if
#201 PARENT_OPEN (
#201 OBJECTID position
#201 MINUS_OPERATOR -
#201 OBJECTID columns
#201 PARENT_CLOSE )
#201 LESS_OPERATOR <
#201 INT_CONST 0
#201 THEN then
#202 STRING_CONST  
#203 ELSE else
#203 IF if
#203 PARENT_OPEN (
#203 PARENT_OPEN (
#203 PARENT_OPEN (
#203 OBJECTID position
#203 PLUS_OPERATOR +
#203 INT_CONST 1
#203 PARENT_CLOSE )
#203 DIV_OPERATOR /
#203 OBJECTID columns
#203 PARENT_CLOSE )
#203 MULT_OPERATOR *
#203 OBJECTID columns
#203 PARENT_CLOSE )
#203 EQ_OPERATOR =
#203 PARENT_OPEN (
#203 OBJECTID position
#203 PLUS_OPERATOR +
#203 INT_CONST 1
#203 PARENT_CLOSE )
#203 THEN then
#204 STRING_CONST  
#205 ELSE else
#206 OBJECTID north
#206 PARENT_OPEN (
#206 OBJECTID position
#206 PLUS_OPERATOR +
#206 INT_CONST 1
#206 PARENT_CLOSE )
#207 FI fi
#207 FI fi
#208 CURLY_CLOSE }
#208 SEMICOLON ;
#210 OBJECTID southeast
#210 PARENT_OPEN (
#210 OBJECTID position
#210 COLON :
#210 TYPEID Int
#210 PARENT_CLOSE )
#210 COLON :
#210 TYPEID String
#210 CURLY_OPEN {
#211 IF if
#211 OBJECTID board_size
#211 LESS_OPERATOR <
#211 PARENT_OPEN (
#211 OBJECTID position
#211 PLUS_OPERATOR +
#211 OBJECTID columns
#211 PARENT_CLOSE )
#211 THEN then
#212 STRING_CONST  
#213 ELSE else
#213 IF if
#213 PARENT_OPEN (
#213 PARENT_OPEN (
#213 PARENT_OPEN (
#213 OBJECTID position
#213 PLUS_OPERATOR +
#213 INT_CONST 1
#213 PARENT_CLOSE )
#213 DIV_OPERATOR /
#213 OBJECTID columns
#213 PARENT_CLOSE )
#213 MULT_OPERATOR *
#213 OBJECTID columns
#213 PARENT_CLOSE )
#213 EQ_OPERATOR =
#213 PARENT_OPEN (
#213 OBJECTID position
#213 PLUS_OPERATOR +
#213 INT_CONST 1
#213 PARENT_CLOSE )
#213 THEN then
#214 STRING_CONST  
#215 ELSE else
#216 OBJECTID south
#216 PARENT_OPEN (
#216 OBJECTID position
#216 PLUS_OPERATOR +
#216 INT_CONST 1
#216 PARENT_CLOSE )
#217 FI fi
#217 FI fi
#218 CURLY_CLOSE }
#218 SEMICOLON ;
#220 OBJECTID southwest
#220 PARENT_OPEN (
#220 OBJECTID position
#220 COLON :
#220 TYPEID Int
#220 PARENT_CLOSE )
#220 COLON :
#220 TYPEID String
#220 CURLY_OPEN {
#221 IF if
#221 OBJECTID board_size
#221 LESS_OPERATOR <
#221 PARENT_OPEN (
#221 OBJECTID position
#221 PLUS_OPERATOR +
#221 OBJECTID columns
#221 PARENT_CLOSE )
#221 THEN then
#222 STRING_CONST  
#223 ELSE else
#223 IF if
#223 PARENT_OPEN (
#223 PARENT_OPEN (
#223 OBJECTID position
#223 DIV_OPERATOR /
#223 OBJECTID columns
#223 PARENT_CLOSE )
#223 MULT_OPERATOR *
#223 OBJECTID columns
#223 PARENT_CLOSE )
#223 EQ_OPERATOR =
#223 OBJECTID position
#223 THEN then
#224 STRING_CONST  
#225 ELSE else
#226 OBJECTID south
#226 PARENT_OPEN (
#226 OBJECTID position
#226 MINUS_OPERATOR -
#226 INT_CONST 1
#226 PARENT_CLOSE )
#227 FI fi
#227 FI fi
#228 CURLY_CLOSE }
#228 SEMICOLON ;
#230 OBJECTID neighbors
#230 PARENT_OPEN (
#230 OBJECTID position
#230 COLON :
#230 TYPEID Int
#230 PARENT_CLOSE )
#230 COLON :
#230 TYPEID Int
#230 CURLY_OPEN {
#231 CURLY_OPEN {
#232 IF if
#232 OBJECTID north
#232 PARENT_OPEN (
#232 OBJECTID position
#232 PARENT_CLOSE )
#232 EQ_OPERATOR =
#232 STRING_CONST X
#232 THEN then
#232 INT_CONST 1
#232 ELSE else
#232 INT_CONST 0
#232 FI fi
#233 PLUS_OPERATOR +
#233 IF if
#233 OBJECTID south
#233 PARENT_OPEN (
#233 OBJECTID position
#233 PARENT_CLOSE )
#233 EQ_OPERATOR =
#233 STRING_CONST X
#233 THEN then
#233 INT_CONST 1
#233 ELSE else
#233 INT_CONST 0
#233 FI fi
#234 PLUS_OPERATOR +
#234 IF if
#234 OBJECTID east
#234 PARENT_OPEN (
#234 OBJECTID position
#234 PARENT_CLOSE )
#234 EQ_OPERATOR =
#234 STRING_CONST X
#234 THEN then
#234 INT_CONST 1
#234 ELSE else
#234 INT_CONST 0
#234 FI fi
#235 PLUS_OPERATOR +
#235 IF if
#235 OBJECTID west
#235 PARENT_OPEN (
#235 OBJECTID position
#235 PARENT_CLOSE )
#235 EQ_OPERATOR =
#235 STRING_CONST X
#235 THEN then
#235 INT_CONST 1
#235 ELSE else
#235 INT_CONST 0
#235 FI fi
#236 PLUS_OPERATOR +
#236 IF if
#236 OBJECTID northeast
#236 PARENT_OPEN (
#236 OBJECTID position
#236 PARENT_CLOSE )
#236 EQ_OPERATOR =
#236 STRING_CONST X
#236 THEN then
#236 INT_CONST 1
#236 ELSE else
#236 INT_CONST 0
#236 FI fi
#237 PLUS_OPERATOR +
#237 IF if
#237 OBJECTID northwest
#237 PARENT_OPEN (
#237 OBJECTID position
#237 PARENT_CLOSE )
#237 EQ_OPERATOR =
#237 STRING_CONST X
#237 THEN then
#237 INT_CONST 1
#237 ELSE else
#237 INT_CONST 0
#237 FI fi
#238 PLUS_OPERATOR +
#238 IF if
#238 OBJECTID southeast
#238 PARENT_OPEN (
#238 OBJECTID position
#238 PARENT_CLOSE )
#238 EQ_OPERATOR =
#238 STRING_CONST X
#238 THEN then
#238 INT_CONST 1
#238 ELSE else
#238 INT_CONST 0
#238 FI fi
#239 PLUS_OPERATOR +
#239 IF if
#239 OBJECTID southwest
#239 PARENT_OPEN (
#239 OBJECTID position
#239 PARENT_CLOSE )
#239 EQ_OPERATOR =
#239 STRING_CONST X
#239 THEN then
#239 INT_CONST 1
#239 ELSE else
#239 INT_CONST 0
#239 FI fi
#239 SEMICOLON ;
#240 CURLY_CLOSE }
#241 CURLY_CLOSE }
#241 SEMICOLON ;
#247 OBJECTID cell_at_next_evolution
#247 PARENT_OPEN (
#247 OBJECTID position
#247 COLON :
#247 TYPEID Int
#247 PARENT_CLOSE )
#247 COLON :
#247 TYPEID String
#247 CURLY_OPEN {
#249 IF if
#249 OBJECTID neighbors
#249 PARENT_OPEN (
#249 OBJECTID position
#249 PARENT_CLOSE )
#249 EQ_OPERATOR =
#249 INT_CONST 3
#249 THEN then
#250 STRING_CONST X
#251 ELSE else
#252 IF if
#252 OBJECTID neighbors
#252 PARENT_OPEN (
#252 OBJECTID position
#252 PARENT_CLOSE )
#252 EQ_OPERATOR =
#252 INT_CONST 2
#252 THEN then
#253 IF if
#253 OBJECTID cell
#253 PARENT_OPEN (
#253 OBJECTID position
#253 PARENT_CLOSE )
#253 EQ_OPERATOR =
#253 STRING_CONST X
#253 THEN then
#254 STRING_CONST X
#255 ELSE else
#256 STRING_CONST -
#257 FI fi
#258 ELSE else
#259 STRING_CONST -
#260 FI fi
#260 FI fi
#261 CURLY_CLOSE }
#261 SEMICOLON ;
#264 OBJECTID evolve
#264 PARENT_OPEN (
#264 PARENT_CLOSE )
#264 COLON :
#264 TYPEID SELF_TYPE
#264 CURLY_OPEN {
#265 PARENT_OPEN (
#265 LET let
#265 OBJECTID position
#265 COLON :
#265 TYPEID Int
#265 ASSIGN_OPERATOR <-
#265 INT_CONST 0
#265 IN in
#266 PARENT_OPEN (
#266 LET let
#266 OBJECTID num
#266 COLON :
#266 TYPEID Int
#266 ASSIGN_OPERATOR <-
#266 OBJECTID num_cells
#266 PARENT_OPEN (
#266 PARENT_CLOSE )
#266 IN in
#267 PARENT_OPEN (
#267 LET let
#267 OBJECTID temp
#267 COLON :
#267 TYPEID String
#267 IN in
#268 CURLY_OPEN {
#269 WHILE while
#269 OBJECTID position
#269 LESS_OPERATOR <
#269 OBJECTID num
#269 LOOP loop
#270 CURLY_OPEN {
#271 OBJECTID temp
#271 ASSIGN_OPERATOR <-
#271 OBJECTID temp
#271 PERIOD .
#271 OBJECTID concat
#271 PARENT_OPEN (
#271 OBJECTID cell_at_next_evolution
#271 PARENT_OPEN (
#271 OBJECTID position
#271 PARENT_CLOSE )
#271 PARENT_CLOSE )
#271 SEMICOLON ;
#272 OBJECTID position
#272 ASSIGN_OPERATOR <-
#272 OBJECTID position
#272 PLUS_OPERATOR +
#272 INT_CONST 1
#272 SEMICOLON ;
#273 CURLY_CLOSE }
#274 POOL pool
#274 SEMICOLON ;
#275 OBJECTID population_map
#275 ASSIGN_OPERATOR <-
#275 OBJECTID temp
#275 SEMICOLON ;
#276 OBJECTID self
#276 SEMICOLON ;
#277 CURLY_CLOSE }
#278 PARENT_CLOSE )
#278 PARENT_CLOSE )
#278 PARENT_CLOSE )
#279 CURLY_CLOSE }
#279 SEMICOLON ;
#284 OBJECTID option
#284 PARENT_OPEN (
#284 PARENT_CLOSE )
#284 COLON :
#284 TYPEID String
#284 CURLY_OPEN {
#285 CURLY_OPEN {
#286 PARENT_OPEN (
#286 LET let
#286 OBJECTID num
#286 COLON :
#286 TYPEID Int
#286 IN in
#287 CURLY_OPEN {
#288 OBJECTID out_string
#288 PARENT_OPEN (
#288 STRING_CONST 
Please chose a number:

#288 PARENT_CLOSE )
#288 SEMICOLON ;
#289 OBJECTID out_string
#289 PARENT_OPEN (
#289 STRING_CONST 	1: A cross

#289 PARENT_CLOSE )
#289 SEMICOLON ;
#290 OBJECTID out_string
#290 PARENT_OPEN (
#290 STRING_CONST 	2: A slash from the upper left to lower right

#290 PARENT_CLOSE )
#290 SEMICOLON ;
#291 OBJECTID out_string
#291 PARENT_OPEN (
#291 STRING_CONST 	3: A slash from the upper right to lower left

#291 PARENT_CLOSE )
#291 SEMICOLON ;
#292 OBJECTID out_string
#292 PARENT_OPEN (
#292 STRING_CONST 	4: An X

#292 PARENT_CLOSE )
#292 SEMICOLON ;
#293 OBJECTID out_string
#293 PARENT_OPEN (
#293 STRING_CONST 	5: A greater than sign 

#293 PARENT_CLOSE )
#293 SEMICOLON ;
#294 OBJECTID out_string
#294 PARENT_OPEN (
#294 STRING_CONST 	6: A less than sign

#294 PARENT_CLOSE )
#294 SEMICOLON ;
#295 OBJECTID out_string
#295 PARENT_OPEN (
#295 STRING_CONST 	7: Two greater than signs

#295 PARENT_CLOSE )
#295 SEMICOLON ;
#296 OBJECTID out_string
#296 PARENT_OPEN (
#296 STRING_CONST 	8: Two less than signs

#296 PARENT_CLOSE )
#296 SEMICOLON ;
#297 OBJECTID out_string
#297 PARENT_OPEN (
#297 STRING_CONST 	9: A 'V'

#297 PARENT_CLOSE )
#297 SEMICOLON ;
#298 OBJECTID out_string
#298 PARENT_OPEN (
#298 STRING_CONST 	10: An inverse 'V'

#298 PARENT_CLOSE )
#298 SEMICOLON ;
#299 OBJECTID out_string
#299 PARENT_OPEN (
#299 STRING_CONST 	11: Numbers 9 and 10 combined

#299 PARENT_CLOSE )
#299 SEMICOLON ;
#300 OBJECTID out_string
#300 PARENT_OPEN (
#300 STRING_CONST 	12: A full grid

#300 PARENT_CLOSE )
#300 SEMICOLON ;
#301 OBJECTID out_string
#301 PARENT_OPEN (
#301 STRING_CONST 	13: A 'T'

#301 PARENT_CLOSE )
#301 SEMICOLON ;
#302 OBJECTID out_string
#302 PARENT_OPEN (
#302 STRING_CONST 	14: A plus '+'

#302 PARENT_CLOSE )
#302 SEMICOLON ;
#303 OBJECTID out_string
#303 PARENT_OPEN (
#303 STRING_CONST 	15: A 'W'

#303 PARENT_CLOSE )
#303 SEMICOLON ;
#304 OBJECTID out_string
#304 PARENT_OPEN (
#304 STRING_CONST 	16: An 'M'

#304 PARENT_CLOSE )
#304 SEMICOLON ;
#305 OBJECTID out_string
#305 PARENT_OPEN (
#305 STRING_CONST 	17: An 'E'

#305 PARENT_CLOSE )
#305 SEMICOLON ;
#306 OBJECTID out_string
#306 PARENT_OPEN (
#306 STRING_CONST 	18: A '3'

#306 PARENT_CLOSE )
#306 SEMICOLON ;
#307 OBJECTID out_string
#307 PARENT_OPEN (
#307 STRING_CONST 	19: An 'O'

#307 PARENT_CLOSE )
#307 SEMICOLON ;
#308 OBJECTID out_string
#308 PARENT_OPEN (
#308 STRING_CONST 	20: An '8'

#308 PARENT_CLOSE )
#308 SEMICOLON ;
#309 OBJECTID out_string
#309 PARENT_OPEN (
#309 STRING_CONST 	21: An 'S'

#309 PARENT_CLOSE )
#309 SEMICOLON ;
#310 OBJECTID out_string
#310 PARENT_OPEN (
#310 STRING_CONST Your choice => 
#310 PARENT_CLOSE )
#310 SEMICOLON ;
#311 OBJECTID num
#311 ASSIGN_OPERATOR <-
#311 OBJECTID in_int
#311 PARENT_OPEN (
#311 PARENT_CLOSE )
#311 SEMICOLON ;
#312 OBJECTID out_string
#312 PARENT_OPEN (
#312 STRING_CONST 

#312 PARENT_CLOSE )
#312 SEMICOLON ;
#313 IF if
#313 OBJECTID num
#313 EQ_OPERATOR =
#313 INT_CONST 1
#313 THEN then
#314 STRING_CONST  XX  XXXX XXXX  XX  
#315 ELSE else
#315 IF if
#315 OBJECTID num
#315 EQ_OPERATOR =
#315 INT_CONST 2
#315 THEN then
#316 STRING_CONST     X   X   X   X   X    
#317 ELSE else
#317 IF if
#317 OBJECTID num
#317 EQ_OPERATOR =
#317 INT_CONST 3
#317 THEN then
#318 STRING_CONST X     X     X     X     X
#319 ELSE else
#319 IF if
#319 OBJECTID num
#319 EQ_OPERATOR =
#319 INT_CONST 4
#319 THEN then
#320 STRING_CONST X   X X X   X   X X X   X
#321 ELSE else
#321 IF if
#321 OBJECTID num
#321 EQ_OPERATOR =
#321 INT_CONST 5
#321 THEN then
#322 STRING_CONST X     X     X   X   X    
#323 ELSE else
#323 IF if
#323 OBJECTID num
#323 EQ_OPERATOR =
#323 INT_CONST 6
#323 THEN then
#324 STRING_CONST     X   X   X     X     X
#325 ELSE else
#325 IF if
#325 OBJECTID num
#325 EQ_OPERATOR =
#325 INT_CONST 7
#325 THEN then
#326 STRING_CONST X  X  X  XX  X      
#327 ELSE else
#327 IF if
#327 OBJECTID num
#327 EQ_OPERATOR =
#327 INT_CONST 8
#327 THEN then
#328 STRING_CONST  X  XX  X  X  X     
#329 ELSE else
#329 IF if
#329 OBJECTID num
#329 EQ_OPERATOR =
#329 INT_CONST 9
#329 THEN then
#330 STRING_CONST X   X X X   X  
#331 ELSE else
#331 IF if
#331 OBJECTID num
#331 EQ_OPERATOR =
#331 INT_CONST 10
#331 THEN then
#332 STRING_CONST   X   X X X   X
#333 ELSE else
#333 IF if
#333 OBJECTID num
#333 EQ_OPERATOR =
#333 INT_CONST 11
#333 THEN then
#334 STRING_CONST X X X X X X X X
#335 ELSE else
#335 IF if
#335 OBJECTID num
#335 EQ_OPERATOR =
#335 INT_CONST 12
#335 THEN then
#336 STRING_CONST XXXXXXXXXXXXXXXXXXXXXXXXX
#337 ELSE else
#337 IF if
#337 OBJECTID num
#337 EQ_OPERATOR =
#337 INT_CONST 13
#337 THEN then
#338 STRING_CONST XXXXX  X    X    X    X  
#339 ELSE else
#339 IF if
#339 OBJECTID num
#339 EQ_OPERATOR =
#339 INT_CONST 14
#339 THEN then
#340 STRING_CONST   X    X  XXXXX  X    X  
#341 ELSE else
#341 IF if
#341 OBJECTID num
#341 EQ_OPERATOR =
#341 INT_CONST 15
#341 THEN then
#342 STRING_CONST X     X X X X   X X  
#343 ELSE else
#343 IF if
#343 OBJECTID num
#343 EQ_OPERATOR =
#343 INT_CONST 16
#343 THEN then
#344 STRING_CONST   X X   X X X X     X
#345 ELSE else
#345 IF if
#345 OBJECTID num
#345 EQ_OPERATOR =
#345 INT_CONST 17
#345 THEN then
#346 STRING_CONST XXXXX   X   XXXXX   X   XXXX
#347 ELSE else
#347 IF if
#347 OBJECTID num
#347 EQ_OPERATOR =
#347 INT_CONST 18
#347 THEN then
#348 STRING_CONST XXX    X   X  X    X   XXXX 
#349 ELSE else
#349 IF if
#349 OBJECTID num
#349 EQ_OPERATOR =
#349 INT_CONST 19
#349 THEN then
#350 STRING_CONST  XX X  XX  X XX 
#351 ELSE else
#351 IF if
#351 OBJECTID num
#351 EQ_OPERATOR =
#351 INT_CONST 20
#351 THEN then
#352 STRING_CONST  XX X  XX  X XX X  XX  X XX 
#353 ELSE else
#353 IF if
#353 OBJECTID num
#353 EQ_OPERATOR =
#353 INT_CONST 21
#353 THEN then
#354 STRING_CONST  XXXX   X    XX    X   XXXX 
#355 ELSE else
#356 STRING_CONST                          
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 FI fi
#357 SEMICOLON ;
#358 CURLY_CLOSE }
#359 PARENT_CLOSE )
#359 SEMICOLON ;
#360 CURLY_CLOSE }
#361 CURLY_CLOSE }
#361 SEMICOLON ;
#366 OBJECTID prompt
#366 PARENT_OPEN (
#366 PARENT_CLOSE )
#366 COLON :
#366 TYPEID Bool
#366 CURLY_OPEN {
#367 CURLY_OPEN {
#368 PARENT_OPEN (
#368 LET let
#368 OBJECTID ans
#368 COLON :
#368 TYPEID String
#368 IN in
#369 CURLY_OPEN {
#370 OBJECTID out_string
#370 PARENT_OPEN (
#370 STRING_CONST Would you like to continue with the next generation? 

#370 PARENT_CLOSE )
#370 SEMICOLON ;
#371 OBJECTID out_string
#371 PARENT_OPEN (
#371 STRING_CONST Please use lowercase y or n for your answer [y]: 
#371 PARENT_CLOSE )
#371 SEMICOLON ;
#372 OBJECTID ans
#372 ASSIGN_OPERATOR <-
#372 OBJECTID in_string
#372 PARENT_OPEN (
#372 PARENT_CLOSE )
#372 SEMICOLON ;
#373 OBJECTID out_string
#373 PARENT_OPEN (
#373 STRING_CONST 

#373 PARENT_CLOSE )
#373 SEMICOLON ;
#374 IF if
#374 OBJECTID ans
#374 EQ_OPERATOR =
#374 STRING_CONST n
#374 THEN then
#375 FALSE false
#376 ELSE else
#377 TRUE true
#378 FI fi
#378 SEMICOLON ;
#379 CURLY_CLOSE }
#380 PARENT_CLOSE )
#380 SEMICOLON ;
#381 CURLY_CLOSE }
#382 CURLY_CLOSE }
#382 SEMICOLON ;
#385 OBJECTID prompt2
#385 PARENT_OPEN (
#385 PARENT_CLOSE )
#385 COLON :
#385 TYPEID Bool
#385 CURLY_OPEN {
#386 PARENT_OPEN (
#386 LET let
#386 OBJECTID ans
#386 COLON :
#386 TYPEID String
#386 IN in
#387 CURLY_OPEN {
#388 OBJECTID out_string
#388 PARENT_OPEN (
#388 STRING_CONST 


#388 PARENT_CLOSE )
#388 SEMICOLON ;
#389 OBJECTID out_string
#389 PARENT_OPEN (
#389 STRING_CONST Would you like to choose a background pattern? 

#389 PARENT_CLOSE )
#389 SEMICOLON ;
#390 OBJECTID out_string
#390 PARENT_OPEN (
#390 STRING_CONST Please use lowercase y or n for your answer [n]: 
#390 PARENT_CLOSE )
#390 SEMICOLON ;
#391 OBJECTID ans
#391 ASSIGN_OPERATOR <-
#391 OBJECTID in_string
#391 PARENT_OPEN (
#391 PARENT_CLOSE )
#391 SEMICOLON ;
#392 IF if
#392 OBJECTID ans
#392 EQ_OPERATOR =
#392 STRING_CONST y
#392 THEN then
#393 TRUE true
#394 ELSE else
#395 FALSE false
#396 FI fi
#396 SEMICOLON ;
#397 CURLY_CLOSE }
#398 PARENT_CLOSE )
#399 CURLY_CLOSE }
#399 SEMICOLON ;
#402 CURLY_CLOSE }
#402 SEMICOLON ;
#404 CLASS class
#404 TYPEID Main
#404 INHERITS inherits
#404 TYPEID CellularAutomaton
#404 CURLY_OPEN {
#405 OBJECTID cells
#405 COLON :
#405 TYPEID CellularAutomaton
#405 SEMICOLON ;
#407 OBJECTID main
#407 PARENT_OPEN (
#407 PARENT_CLOSE )
#407 COLON :
#407 TYPEID SELF_TYPE
#407 CURLY_OPEN {
#408 CURLY_OPEN {
#409 PARENT_OPEN (
#409 LET let
#409 OBJECTID continue
#409 COLON :
#409 TYPEID Bool
#409 IN in
#410 PARENT_OPEN (
#410 LET let
#410 OBJECTID choice
#410 COLON :
#410 TYPEID String
#410 IN in
#411 CURLY_OPEN {
#412 OBJECTID out_string
#412 PARENT_OPEN (
#412 STRING_CONST Welcome to the Game of Life.

#412 PARENT_CLOSE )
#412 SEMICOLON ;
#413 OBJECTID out_string
#413 PARENT_OPEN (
#413 STRING_CONST There are many initial states to choose from. 

#413 PARENT_CLOSE )
#413 SEMICOLON ;
#414 WHILE while
#414 OBJECTID prompt2
#414 PARENT_OPEN (
#414 PARENT_CLOSE )
#414 LOOP loop
#415 CURLY_OPEN {
#416 OBJECTID continue
#416 ASSIGN_OPERATOR <-
#416 TRUE true
#416 SEMICOLON ;
#417 OBJECTID choice
#417 ASSIGN_OPERATOR <-
#417 OBJECTID option
#417 PARENT_OPEN (
#417 PARENT_CLOSE )
#417 SEMICOLON ;
#418 OBJECTID cells
#418 ASSIGN_OPERATOR <-
#418 PARENT_OPEN (
#418 NEW new
#418 TYPEID CellularAutomaton
#418 PARENT_CLOSE )
#418 PERIOD .
#418 OBJECTID init
#418 PARENT_OPEN (
#418 OBJECTID choice
#418 PARENT_CLOSE )
#418 SEMICOLON ;
#419 OBJECTID cells
#419 PERIOD .
#419 OBJECTID print
#419 PARENT_OPEN (
#419 PARENT_CLOSE )
#419 SEMICOLON ;
#420 WHILE while
#420 OBJECTID continue
#420 LOOP loop
#421 IF if
#421 OBJECTID prompt
#421 PARENT_OPEN (
#421 PARENT_CLOSE )
#421 THEN then
#422 CURLY_OPEN {
#423 OBJECTID cells
#423 PERIOD .
#423 OBJECTID evolve
#423 PARENT_OPEN (
#423 PARENT_CLOSE )
#423 SEMICOLON ;
#424 OBJECTID cells
#424 PERIOD .
#424 OBJECTID print
#424 PARENT_OPEN (
#424 PARENT_CLOSE )
#424 SEMICOLON ;
#425 CURLY_CLOSE }
#426 ELSE else
#427 OBJECTID continue
#427 ASSIGN_OPERATOR <-
#427 FALSE false
#428 FI fi
#429 POOL pool
#429 SEMICOLON ;
#430 CURLY_CLOSE }
#431 POOL pool
#431 SEMICOLON ;
#432 OBJECTID self
#432 SEMICOLON ;
#433 CURLY_CLOSE }
#433 PARENT_CLOSE )
#433 PARENT_CLOSE )
#433 SEMICOLON ;
#433 CURLY_CLOSE }
#434 CURLY_CLOSE }
#434 SEMICOLON ;
#435 CURLY_CLOSE }
#435 SEMICOLON ;
#437 EOF <EOF>
