#3 CLASS class
#3 TYPEID Foo
#3 INHERITS inherits
#3 TYPEID Bazz
#3 CURLY_OPEN {
#4 OBJECTID a
#4 COLON :
#4 TYPEID Razz
#4 ASSIGN_OPERATOR <-
#4 CASE case
#4 OBJECTID self
#4 OF of
#5 OBJECTID n
#5 COLON :
#5 TYPEID Razz
#5 RIGHTARROW =>
#5 PARENT_OPEN (
#5 NEW new
#5 TYPEID Bar
#5 PARENT_CLOSE )
#5 SEMICOLON ;
#6 OBJECTID n
#6 COLON :
#6 TYPEID Foo
#6 RIGHTARROW =>
#6 PARENT_OPEN (
#6 NEW new
#6 TYPEID Razz
#6 PARENT_CLOSE )
#6 SEMICOLON ;
#7 OBJECTID n
#7 COLON :
#7 TYPEID Bar
#7 RIGHTARROW =>
#7 OBJECTID n
#7 SEMICOLON ;
#8 ESAC esac
#8 SEMICOLON ;
#10 OBJECTID b
#10 COLON :
#10 TYPEID Int
#10 ASSIGN_OPERATOR <-
#10 OBJECTID a
#10 PERIOD .
#10 OBJECTID doh
#10 PARENT_OPEN (
#10 PARENT_CLOSE )
#10 PLUS_OPERATOR +
#10 OBJECTID g
#10 PERIOD .
#10 OBJECTID doh
#10 PARENT_OPEN (
#10 PARENT_CLOSE )
#10 PLUS_OPERATOR +
#10 OBJECTID doh
#10 PARENT_OPEN (
#10 PARENT_CLOSE )
#10 PLUS_OPERATOR +
#10 OBJECTID printh
#10 PARENT_OPEN (
#10 PARENT_CLOSE )
#10 SEMICOLON ;
#12 OBJECTID doh
#12 PARENT_OPEN (
#12 PARENT_CLOSE )
#12 COLON :
#12 TYPEID Int
#12 CURLY_OPEN {
#12 PARENT_OPEN (
#12 LET let
#12 OBJECTID i
#12 COLON :
#12 TYPEID Int
#12 ASSIGN_OPERATOR <-
#12 OBJECTID h
#12 IN in
#12 CURLY_OPEN {
#12 OBJECTID h
#12 ASSIGN_OPERATOR <-
#12 OBJECTID h
#12 PLUS_OPERATOR +
#12 INT_CONST 2
#12 SEMICOLON ;
#12 OBJECTID i
#12 SEMICOLON ;
#12 CURLY_CLOSE }
#12 PARENT_CLOSE )
#12 CURLY_CLOSE }
#12 SEMICOLON ;
#14 CURLY_CLOSE }
#14 SEMICOLON ;
#16 CLASS class
#16 TYPEID Bar
#16 INHERITS inherits
#16 TYPEID Razz
#16 CURLY_OPEN {
#18 OBJECTID c
#18 COLON :
#18 TYPEID Int
#18 ASSIGN_OPERATOR <-
#18 OBJECTID doh
#18 PARENT_OPEN (
#18 PARENT_CLOSE )
#18 SEMICOLON ;
#20 OBJECTID d
#20 COLON :
#20 TYPEID Object
#20 ASSIGN_OPERATOR <-
#20 OBJECTID printh
#20 PARENT_OPEN (
#20 PARENT_CLOSE )
#20 SEMICOLON ;
#21 CURLY_CLOSE }
#21 SEMICOLON ;
#24 CLASS class
#24 TYPEID Razz
#24 INHERITS inherits
#24 TYPEID Foo
#24 CURLY_OPEN {
#26 OBJECTID e
#26 COLON :
#26 TYPEID Bar
#26 ASSIGN_OPERATOR <-
#26 CASE case
#26 OBJECTID self
#26 OF of
#27 OBJECTID n
#27 COLON :
#27 TYPEID Razz
#27 RIGHTARROW =>
#27 PARENT_OPEN (
#27 NEW new
#27 TYPEID Bar
#27 PARENT_CLOSE )
#27 SEMICOLON ;
#28 OBJECTID n
#28 COLON :
#28 TYPEID Bar
#28 RIGHTARROW =>
#28 OBJECTID n
#28 SEMICOLON ;
#29 ESAC esac
#29 SEMICOLON ;
#31 OBJECTID f
#31 COLON :
#31 TYPEID Int
#31 ASSIGN_OPERATOR <-
#31 OBJECTID a
#31 AT @
#31 TYPEID Bazz
#31 PERIOD .
#31 OBJECTID doh
#31 PARENT_OPEN (
#31 PARENT_CLOSE )
#31 PLUS_OPERATOR +
#31 OBJECTID g
#31 PERIOD .
#31 OBJECTID doh
#31 PARENT_OPEN (
#31 PARENT_CLOSE )
#31 PLUS_OPERATOR +
#31 OBJECTID e
#31 PERIOD .
#31 OBJECTID doh
#31 PARENT_OPEN (
#31 PARENT_CLOSE )
#31 PLUS_OPERATOR +
#31 OBJECTID doh
#31 PARENT_OPEN (
#31 PARENT_CLOSE )
#31 PLUS_OPERATOR +
#31 OBJECTID printh
#31 PARENT_OPEN (
#31 PARENT_CLOSE )
#31 SEMICOLON ;
#33 CURLY_CLOSE }
#33 SEMICOLON ;
#35 CLASS class
#35 TYPEID Bazz
#35 INHERITS inherits
#35 TYPEID IO
#35 CURLY_OPEN {
#37 OBJECTID h
#37 COLON :
#37 TYPEID Int
#37 ASSIGN_OPERATOR <-
#37 INT_CONST 1
#37 SEMICOLON ;
#39 OBJECTID g
#39 COLON :
#39 TYPEID Foo
#39 ASSIGN_OPERATOR <-
#39 CASE case
#39 OBJECTID self
#39 OF of
#40 OBJECTID n
#40 COLON :
#40 TYPEID Bazz
#40 RIGHTARROW =>
#40 PARENT_OPEN (
#40 NEW new
#40 TYPEID Foo
#40 PARENT_CLOSE )
#40 SEMICOLON ;
#41 OBJECTID n
#41 COLON :
#41 TYPEID Razz
#41 RIGHTARROW =>
#41 PARENT_OPEN (
#41 NEW new
#41 TYPEID Bar
#41 PARENT_CLOSE )
#41 SEMICOLON ;
#42 OBJECTID n
#42 COLON :
#42 TYPEID Foo
#42 RIGHTARROW =>
#42 PARENT_OPEN (
#42 NEW new
#42 TYPEID Razz
#42 PARENT_CLOSE )
#42 SEMICOLON ;
#43 OBJECTID n
#43 COLON :
#43 TYPEID Bar
#43 RIGHTARROW =>
#43 OBJECTID n
#43 SEMICOLON ;
#44 ESAC esac
#44 SEMICOLON ;
#46 OBJECTID i
#46 COLON :
#46 TYPEID Object
#46 ASSIGN_OPERATOR <-
#46 OBJECTID printh
#46 PARENT_OPEN (
#46 PARENT_CLOSE )
#46 SEMICOLON ;
#48 OBJECTID printh
#48 PARENT_OPEN (
#48 PARENT_CLOSE )
#48 COLON :
#48 TYPEID Int
#48 CURLY_OPEN {
#48 CURLY_OPEN {
#48 OBJECTID out_int
#48 PARENT_OPEN (
#48 OBJECTID h
#48 PARENT_CLOSE )
#48 SEMICOLON ;
#48 INT_CONST 0
#48 SEMICOLON ;
#48 CURLY_CLOSE }
#48 CURLY_CLOSE }
#48 SEMICOLON ;
#50 OBJECTID doh
#50 PARENT_OPEN (
#50 PARENT_CLOSE )
#50 COLON :
#50 TYPEID Int
#50 CURLY_OPEN {
#50 PARENT_OPEN (
#50 LET let
#50 OBJECTID i
#50 COLON :
#50 TYPEID Int
#50 ASSIGN_OPERATOR <-
#50 OBJECTID h
#50 IN in
#50 CURLY_OPEN {
#50 OBJECTID h
#50 ASSIGN_OPERATOR <-
#50 OBJECTID h
#50 PLUS_OPERATOR +
#50 INT_CONST 1
#50 SEMICOLON ;
#50 OBJECTID i
#50 SEMICOLON ;
#50 CURLY_CLOSE }
#50 PARENT_CLOSE )
#50 CURLY_CLOSE }
#50 SEMICOLON ;
#51 CURLY_CLOSE }
#51 SEMICOLON ;
#54 CLASS class
#54 TYPEID Main
#54 CURLY_OPEN {
#55 OBJECTID a
#55 COLON :
#55 TYPEID Bazz
#55 ASSIGN_OPERATOR <-
#55 NEW new
#55 TYPEID Bazz
#55 SEMICOLON ;
#56 OBJECTID b
#56 COLON :
#56 TYPEID Foo
#56 ASSIGN_OPERATOR <-
#56 NEW new
#56 TYPEID Foo
#56 SEMICOLON ;
#57 OBJECTID c
#57 COLON :
#57 TYPEID Razz
#57 ASSIGN_OPERATOR <-
#57 NEW new
#57 TYPEID Razz
#57 SEMICOLON ;
#58 OBJECTID d
#58 COLON :
#58 TYPEID Bar
#58 ASSIGN_OPERATOR <-
#58 NEW new
#58 TYPEID Bar
#58 SEMICOLON ;
#60 OBJECTID main
#60 PARENT_OPEN (
#60 PARENT_CLOSE )
#60 COLON :
#60 TYPEID String
#60 CURLY_OPEN {
#60 STRING_CONST do nothing
#60 CURLY_CLOSE }
#60 SEMICOLON ;
#62 CURLY_CLOSE }
#62 SEMICOLON ;
#68 EOF <EOF>
