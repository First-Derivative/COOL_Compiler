#1 CLASS class
#1 TYPEID Main
#1 INHERITS inherits
#1 TYPEID IO
#1 CURLY_OPEN {
#2 OBJECTID main
#2 PARENT_OPEN (
#2 PARENT_CLOSE )
#2 COLON :
#2 TYPEID SELF_TYPE
#2 CURLY_OPEN {
#3 PARENT_OPEN (
#3 LET let
#3 OBJECTID c
#3 COLON :
#3 TYPEID Complex
#3 ASSIGN_OPERATOR <-
#3 PARENT_OPEN (
#3 NEW new
#3 TYPEID Complex
#3 PARENT_CLOSE )
#3 PERIOD .
#3 OBJECTID init
#3 PARENT_OPEN (
#3 INT_CONST 1
#3 COMMA ,
#3 INT_CONST 1
#3 PARENT_CLOSE )
#3 IN in
#4 CURLY_OPEN {
#6 IF if
#6 OBJECTID c
#6 PERIOD .
#6 OBJECTID reflect_X
#6 PARENT_OPEN (
#6 PARENT_CLOSE )
#6 EQ_OPERATOR =
#6 OBJECTID c
#6 PERIOD .
#6 OBJECTID reflect_0
#6 PARENT_OPEN (
#6 PARENT_CLOSE )
#7 THEN then
#7 OBJECTID out_string
#7 PARENT_OPEN (
#7 STRING_CONST =)

#7 PARENT_CLOSE )
#8 ELSE else
#8 OBJECTID out_string
#8 PARENT_OPEN (
#8 STRING_CONST =(

#8 PARENT_CLOSE )
#9 FI fi
#9 SEMICOLON ;
#11 IF if
#11 OBJECTID c
#11 PERIOD .
#11 OBJECTID reflect_X
#11 PARENT_OPEN (
#11 PARENT_CLOSE )
#11 PERIOD .
#11 OBJECTID reflect_Y
#11 PARENT_OPEN (
#11 PARENT_CLOSE )
#11 PERIOD .
#11 OBJECTID equal
#11 PARENT_OPEN (
#11 OBJECTID c
#11 PERIOD .
#11 OBJECTID reflect_0
#11 PARENT_OPEN (
#11 PARENT_CLOSE )
#11 PARENT_CLOSE )
#12 THEN then
#12 OBJECTID out_string
#12 PARENT_OPEN (
#12 STRING_CONST =)

#12 PARENT_CLOSE )
#13 ELSE else
#13 OBJECTID out_string
#13 PARENT_OPEN (
#13 STRING_CONST =(

#13 PARENT_CLOSE )
#14 FI fi
#14 SEMICOLON ;
#15 CURLY_CLOSE }
#16 PARENT_CLOSE )
#17 CURLY_CLOSE }
#17 SEMICOLON ;
#18 CURLY_CLOSE }
#18 SEMICOLON ;
#20 CLASS class
#20 TYPEID Complex
#20 INHERITS inherits
#20 TYPEID IO
#20 CURLY_OPEN {
#21 OBJECTID x
#21 COLON :
#21 TYPEID Int
#21 SEMICOLON ;
#22 OBJECTID y
#22 COLON :
#22 TYPEID Int
#22 SEMICOLON ;
#24 OBJECTID init
#24 PARENT_OPEN (
#24 OBJECTID a
#24 COLON :
#24 TYPEID Int
#24 COMMA ,
#24 OBJECTID b
#24 COLON :
#24 TYPEID Int
#24 PARENT_CLOSE )
#24 COLON :
#24 TYPEID Complex
#24 CURLY_OPEN {
#25 CURLY_OPEN {
#26 OBJECTID x
#26 EQ_OPERATOR =
#26 OBJECTID a
#26 SEMICOLON ;
#27 OBJECTID y
#27 EQ_OPERATOR =
#27 OBJECTID b
#27 SEMICOLON ;
#28 OBJECTID self
#28 SEMICOLON ;
#29 CURLY_CLOSE }
#30 CURLY_CLOSE }
#30 SEMICOLON ;
#32 OBJECTID print
#32 PARENT_OPEN (
#32 PARENT_CLOSE )
#32 COLON :
#32 TYPEID Object
#32 CURLY_OPEN {
#33 IF if
#33 OBJECTID y
#33 EQ_OPERATOR =
#33 INT_CONST 0
#34 THEN then
#34 OBJECTID out_int
#34 PARENT_OPEN (
#34 OBJECTID x
#34 PARENT_CLOSE )
#35 ELSE else
#35 OBJECTID out_int
#35 PARENT_OPEN (
#35 OBJECTID x
#35 PARENT_CLOSE )
#35 PERIOD .
#35 OBJECTID out_string
#35 PARENT_OPEN (
#35 STRING_CONST +
#35 PARENT_CLOSE )
#35 PERIOD .
#35 OBJECTID out_int
#35 PARENT_OPEN (
#35 OBJECTID y
#35 PARENT_CLOSE )
#35 PERIOD .
#35 OBJECTID out_string
#35 PARENT_OPEN (
#35 STRING_CONST I
#35 PARENT_CLOSE )
#36 FI fi
#37 CURLY_CLOSE }
#37 SEMICOLON ;
#39 OBJECTID reflect_0
#39 PARENT_OPEN (
#39 PARENT_CLOSE )
#39 COLON :
#39 TYPEID Complex
#39 CURLY_OPEN {
#40 CURLY_OPEN {
#41 OBJECTID x
#41 EQ_OPERATOR =
#41 INT_COMPLEMENT_OPERATOR ~
#41 OBJECTID x
#41 SEMICOLON ;
#42 OBJECTID y
#42 EQ_OPERATOR =
#42 INT_COMPLEMENT_OPERATOR ~
#42 OBJECTID y
#42 SEMICOLON ;
#43 OBJECTID self
#43 SEMICOLON ;
#44 CURLY_CLOSE }
#45 CURLY_CLOSE }
#45 SEMICOLON ;
#47 OBJECTID reflect_X
#47 PARENT_OPEN (
#47 PARENT_CLOSE )
#47 COLON :
#47 TYPEID Complex
#47 CURLY_OPEN {
#48 CURLY_OPEN {
#49 OBJECTID y
#49 EQ_OPERATOR =
#49 INT_COMPLEMENT_OPERATOR ~
#49 OBJECTID y
#49 SEMICOLON ;
#50 OBJECTID self
#50 SEMICOLON ;
#51 CURLY_CLOSE }
#52 CURLY_CLOSE }
#52 SEMICOLON ;
#54 OBJECTID reflect_Y
#54 PARENT_OPEN (
#54 PARENT_CLOSE )
#54 COLON :
#54 TYPEID Complex
#54 CURLY_OPEN {
#55 CURLY_OPEN {
#56 OBJECTID x
#56 EQ_OPERATOR =
#56 INT_COMPLEMENT_OPERATOR ~
#56 OBJECTID x
#56 SEMICOLON ;
#57 OBJECTID self
#57 SEMICOLON ;
#58 CURLY_CLOSE }
#59 CURLY_CLOSE }
#59 SEMICOLON ;
#61 OBJECTID equal
#61 PARENT_OPEN (
#61 OBJECTID d
#61 COLON :
#61 TYPEID Complex
#61 PARENT_CLOSE )
#61 COLON :
#61 TYPEID Bool
#61 CURLY_OPEN {
#62 IF if
#62 OBJECTID x
#62 EQ_OPERATOR =
#62 OBJECTID d
#62 PERIOD .
#62 OBJECTID x_value
#62 PARENT_OPEN (
#62 PARENT_CLOSE )
#63 THEN then
#64 IF if
#64 OBJECTID y
#64 EQ_OPERATOR =
#64 OBJECTID d
#64 PERIOD .
#64 OBJECTID y_value
#64 PARENT_OPEN (
#64 PARENT_CLOSE )
#65 THEN then
#65 TRUE true
#66 ELSE else
#66 FALSE false
#67 FI fi
#68 ELSE else
#68 FALSE false
#69 FI fi
#70 CURLY_CLOSE }
#70 SEMICOLON ;
#72 OBJECTID x_value
#72 PARENT_OPEN (
#72 PARENT_CLOSE )
#72 COLON :
#72 TYPEID Int
#72 CURLY_OPEN {
#73 OBJECTID x
#74 CURLY_CLOSE }
#74 SEMICOLON ;
#76 OBJECTID y_value
#76 PARENT_OPEN (
#76 PARENT_CLOSE )
#76 COLON :
#76 TYPEID Int
#76 CURLY_OPEN {
#77 OBJECTID y
#78 CURLY_CLOSE }
#78 SEMICOLON ;
#79 CURLY_CLOSE }
#79 SEMICOLON ;
#80 EOF <EOF>
