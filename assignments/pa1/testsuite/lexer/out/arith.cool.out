#7 CLASS class
#7 TYPEID A
#7 CURLY_OPEN {
#9 OBJECTID var
#9 COLON :
#9 TYPEID Int
#9 ASSIGN_OPERATOR <-
#9 INT_CONST 0
#9 SEMICOLON ;
#11 OBJECTID value
#11 PARENT_OPEN (
#11 PARENT_CLOSE )
#11 COLON :
#11 TYPEID Int
#11 CURLY_OPEN {
#11 OBJECTID var
#11 CURLY_CLOSE }
#11 SEMICOLON ;
#13 OBJECTID set_var
#13 PARENT_OPEN (
#13 OBJECTID num
#13 COLON :
#13 TYPEID Int
#13 PARENT_CLOSE )
#13 COLON :
#13 TYPEID SELF_TYPE
#13 CURLY_OPEN {
#14 CURLY_OPEN {
#15 OBJECTID var
#15 ASSIGN_OPERATOR <-
#15 OBJECTID num
#15 SEMICOLON ;
#16 OBJECTID self
#16 SEMICOLON ;
#17 CURLY_CLOSE }
#18 CURLY_CLOSE }
#18 SEMICOLON ;
#20 OBJECTID method1
#20 PARENT_OPEN (
#20 OBJECTID num
#20 COLON :
#20 TYPEID Int
#20 PARENT_CLOSE )
#20 COLON :
#20 TYPEID SELF_TYPE
#20 CURLY_OPEN {
#21 OBJECTID self
#22 CURLY_CLOSE }
#22 SEMICOLON ;
#24 OBJECTID method2
#24 PARENT_OPEN (
#24 OBJECTID num1
#24 COLON :
#24 TYPEID Int
#24 COMMA ,
#24 OBJECTID num2
#24 COLON :
#24 TYPEID Int
#24 PARENT_CLOSE )
#24 COLON :
#24 TYPEID B
#24 CURLY_OPEN {
#25 PARENT_OPEN (
#25 LET let
#25 OBJECTID x
#25 COLON :
#25 TYPEID Int
#25 IN in
#26 CURLY_OPEN {
#27 OBJECTID x
#27 ASSIGN_OPERATOR <-
#27 OBJECTID num1
#27 PLUS_OPERATOR +
#27 OBJECTID num2
#27 SEMICOLON ;
#28 PARENT_OPEN (
#28 NEW new
#28 TYPEID B
#28 PARENT_CLOSE )
#28 PERIOD .
#28 OBJECTID set_var
#28 PARENT_OPEN (
#28 OBJECTID x
#28 PARENT_CLOSE )
#28 SEMICOLON ;
#29 CURLY_CLOSE }
#30 PARENT_CLOSE )
#31 CURLY_CLOSE }
#31 SEMICOLON ;
#33 OBJECTID method3
#33 PARENT_OPEN (
#33 OBJECTID num
#33 COLON :
#33 TYPEID Int
#33 PARENT_CLOSE )
#33 COLON :
#33 TYPEID C
#33 CURLY_OPEN {
#34 PARENT_OPEN (
#34 LET let
#34 OBJECTID x
#34 COLON :
#34 TYPEID Int
#34 IN in
#35 CURLY_OPEN {
#36 OBJECTID x
#36 ASSIGN_OPERATOR <-
#36 INT_COMPLEMENT_OPERATOR ~
#36 OBJECTID num
#36 SEMICOLON ;
#37 PARENT_OPEN (
#37 NEW new
#37 TYPEID C
#37 PARENT_CLOSE )
#37 PERIOD .
#37 OBJECTID set_var
#37 PARENT_OPEN (
#37 OBJECTID x
#37 PARENT_CLOSE )
#37 SEMICOLON ;
#38 CURLY_CLOSE }
#39 PARENT_CLOSE )
#40 CURLY_CLOSE }
#40 SEMICOLON ;
#42 OBJECTID method4
#42 PARENT_OPEN (
#42 OBJECTID num1
#42 COLON :
#42 TYPEID Int
#42 COMMA ,
#42 OBJECTID num2
#42 COLON :
#42 TYPEID Int
#42 PARENT_CLOSE )
#42 COLON :
#42 TYPEID D
#42 CURLY_OPEN {
#43 IF if
#43 OBJECTID num2
#43 LESS_OPERATOR <
#43 OBJECTID num1
#43 THEN then
#44 PARENT_OPEN (
#44 LET let
#44 OBJECTID x
#44 COLON :
#44 TYPEID Int
#44 IN in
#45 CURLY_OPEN {
#46 OBJECTID x
#46 ASSIGN_OPERATOR <-
#46 OBJECTID num1
#46 MINUS_OPERATOR -
#46 OBJECTID num2
#46 SEMICOLON ;
#47 PARENT_OPEN (
#47 NEW new
#47 TYPEID D
#47 PARENT_CLOSE )
#47 PERIOD .
#47 OBJECTID set_var
#47 PARENT_OPEN (
#47 OBJECTID x
#47 PARENT_CLOSE )
#47 SEMICOLON ;
#48 CURLY_CLOSE }
#49 PARENT_CLOSE )
#50 ELSE else
#51 PARENT_OPEN (
#51 LET let
#51 OBJECTID x
#51 COLON :
#51 TYPEID Int
#51 IN in
#52 CURLY_OPEN {
#53 OBJECTID x
#53 ASSIGN_OPERATOR <-
#53 OBJECTID num2
#53 MINUS_OPERATOR -
#53 OBJECTID num1
#53 SEMICOLON ;
#54 PARENT_OPEN (
#54 NEW new
#54 TYPEID D
#54 PARENT_CLOSE )
#54 PERIOD .
#54 OBJECTID set_var
#54 PARENT_OPEN (
#54 OBJECTID x
#54 PARENT_CLOSE )
#54 SEMICOLON ;
#55 CURLY_CLOSE }
#56 PARENT_CLOSE )
#57 FI fi
#58 CURLY_CLOSE }
#58 SEMICOLON ;
#60 OBJECTID method5
#60 PARENT_OPEN (
#60 OBJECTID num
#60 COLON :
#60 TYPEID Int
#60 PARENT_CLOSE )
#60 COLON :
#60 TYPEID E
#60 CURLY_OPEN {
#61 PARENT_OPEN (
#61 LET let
#61 OBJECTID x
#61 COLON :
#61 TYPEID Int
#61 ASSIGN_OPERATOR <-
#61 INT_CONST 1
#61 IN in
#62 CURLY_OPEN {
#63 PARENT_OPEN (
#63 LET let
#63 OBJECTID y
#63 COLON :
#63 TYPEID Int
#63 ASSIGN_OPERATOR <-
#63 INT_CONST 1
#63 IN in
#64 WHILE while
#64 OBJECTID y
#64 LESS_EQ_OPERATOR <=
#64 OBJECTID num
#64 LOOP loop
#65 CURLY_OPEN {
#66 OBJECTID x
#66 ASSIGN_OPERATOR <-
#66 OBJECTID x
#66 MULT_OPERATOR *
#66 OBJECTID y
#66 SEMICOLON ;
#67 OBJECTID y
#67 ASSIGN_OPERATOR <-
#67 OBJECTID y
#67 PLUS_OPERATOR +
#67 INT_CONST 1
#67 SEMICOLON ;
#68 CURLY_CLOSE }
#69 POOL pool
#70 PARENT_CLOSE )
#70 SEMICOLON ;
#71 PARENT_OPEN (
#71 NEW new
#71 TYPEID E
#71 PARENT_CLOSE )
#71 PERIOD .
#71 OBJECTID set_var
#71 PARENT_OPEN (
#71 OBJECTID x
#71 PARENT_CLOSE )
#71 SEMICOLON ;
#72 CURLY_CLOSE }
#73 PARENT_CLOSE )
#74 CURLY_CLOSE }
#74 SEMICOLON ;
#76 CURLY_CLOSE }
#76 SEMICOLON ;
#78 CLASS class
#78 TYPEID B
#78 INHERITS inherits
#78 TYPEID A
#78 CURLY_OPEN {
#80 OBJECTID method5
#80 PARENT_OPEN (
#80 OBJECTID num
#80 COLON :
#80 TYPEID Int
#80 PARENT_CLOSE )
#80 COLON :
#80 TYPEID E
#80 CURLY_OPEN {
#81 PARENT_OPEN (
#81 LET let
#81 OBJECTID x
#81 COLON :
#81 TYPEID Int
#81 IN in
#82 CURLY_OPEN {
#83 OBJECTID x
#83 ASSIGN_OPERATOR <-
#83 OBJECTID num
#83 MULT_OPERATOR *
#83 OBJECTID num
#83 SEMICOLON ;
#84 PARENT_OPEN (
#84 NEW new
#84 TYPEID E
#84 PARENT_CLOSE )
#84 PERIOD .
#84 OBJECTID set_var
#84 PARENT_OPEN (
#84 OBJECTID x
#84 PARENT_CLOSE )
#84 SEMICOLON ;
#85 CURLY_CLOSE }
#86 PARENT_CLOSE )
#87 CURLY_CLOSE }
#87 SEMICOLON ;
#89 CURLY_CLOSE }
#89 SEMICOLON ;
#91 CLASS class
#91 TYPEID C
#91 INHERITS inherits
#91 TYPEID B
#91 CURLY_OPEN {
#93 OBJECTID method6
#93 PARENT_OPEN (
#93 OBJECTID num
#93 COLON :
#93 TYPEID Int
#93 PARENT_CLOSE )
#93 COLON :
#93 TYPEID A
#93 CURLY_OPEN {
#94 PARENT_OPEN (
#94 LET let
#94 OBJECTID x
#94 COLON :
#94 TYPEID Int
#94 IN in
#95 CURLY_OPEN {
#96 OBJECTID x
#96 ASSIGN_OPERATOR <-
#96 INT_COMPLEMENT_OPERATOR ~
#96 OBJECTID num
#96 SEMICOLON ;
#97 PARENT_OPEN (
#97 NEW new
#97 TYPEID A
#97 PARENT_CLOSE )
#97 PERIOD .
#97 OBJECTID set_var
#97 PARENT_OPEN (
#97 OBJECTID x
#97 PARENT_CLOSE )
#97 SEMICOLON ;
#98 CURLY_CLOSE }
#99 PARENT_CLOSE )
#100 CURLY_CLOSE }
#100 SEMICOLON ;
#102 OBJECTID method5
#102 PARENT_OPEN (
#102 OBJECTID num
#102 COLON :
#102 TYPEID Int
#102 PARENT_CLOSE )
#102 COLON :
#102 TYPEID E
#102 CURLY_OPEN {
#103 PARENT_OPEN (
#103 LET let
#103 OBJECTID x
#103 COLON :
#103 TYPEID Int
#103 IN in
#104 CURLY_OPEN {
#105 OBJECTID x
#105 ASSIGN_OPERATOR <-
#105 OBJECTID num
#105 MULT_OPERATOR *
#105 OBJECTID num
#105 MULT_OPERATOR *
#105 OBJECTID num
#105 SEMICOLON ;
#106 PARENT_OPEN (
#106 NEW new
#106 TYPEID E
#106 PARENT_CLOSE )
#106 PERIOD .
#106 OBJECTID set_var
#106 PARENT_OPEN (
#106 OBJECTID x
#106 PARENT_CLOSE )
#106 SEMICOLON ;
#107 CURLY_CLOSE }
#108 PARENT_CLOSE )
#109 CURLY_CLOSE }
#109 SEMICOLON ;
#111 CURLY_CLOSE }
#111 SEMICOLON ;
#113 CLASS class
#113 TYPEID D
#113 INHERITS inherits
#113 TYPEID B
#113 CURLY_OPEN {
#115 OBJECTID method7
#115 PARENT_OPEN (
#115 OBJECTID num
#115 COLON :
#115 TYPEID Int
#115 PARENT_CLOSE )
#115 COLON :
#115 TYPEID Bool
#115 CURLY_OPEN {
#116 PARENT_OPEN (
#116 LET let
#116 OBJECTID x
#116 COLON :
#116 TYPEID Int
#116 ASSIGN_OPERATOR <-
#116 OBJECTID num
#116 IN in
#117 IF if
#117 OBJECTID x
#117 LESS_OPERATOR <
#117 INT_CONST 0
#117 THEN then
#117 OBJECTID method7
#117 PARENT_OPEN (
#117 INT_COMPLEMENT_OPERATOR ~
#117 OBJECTID x
#117 PARENT_CLOSE )
#117 ELSE else
#118 IF if
#118 INT_CONST 0
#118 EQ_OPERATOR =
#118 OBJECTID x
#118 THEN then
#118 TRUE true
#118 ELSE else
#119 IF if
#119 INT_CONST 1
#119 EQ_OPERATOR =
#119 OBJECTID x
#119 THEN then
#119 FALSE false
#119 ELSE else
#120 IF if
#120 INT_CONST 2
#120 EQ_OPERATOR =
#120 OBJECTID x
#120 THEN then
#120 FALSE false
#120 ELSE else
#121 OBJECTID method7
#121 PARENT_OPEN (
#121 OBJECTID x
#121 MINUS_OPERATOR -
#121 INT_CONST 3
#121 PARENT_CLOSE )
#122 FI fi
#122 FI fi
#122 FI fi
#122 FI fi
#123 PARENT_CLOSE )
#124 CURLY_CLOSE }
#124 SEMICOLON ;
#126 CURLY_CLOSE }
#126 SEMICOLON ;
#128 CLASS class
#128 TYPEID E
#128 INHERITS inherits
#128 TYPEID D
#128 CURLY_OPEN {
#130 OBJECTID method6
#130 PARENT_OPEN (
#130 OBJECTID num
#130 COLON :
#130 TYPEID Int
#130 PARENT_CLOSE )
#130 COLON :
#130 TYPEID A
#130 CURLY_OPEN {
#131 PARENT_OPEN (
#131 LET let
#131 OBJECTID x
#131 COLON :
#131 TYPEID Int
#131 IN in
#132 CURLY_OPEN {
#133 OBJECTID x
#133 ASSIGN_OPERATOR <-
#133 OBJECTID num
#133 DIV_OPERATOR /
#133 INT_CONST 8
#133 SEMICOLON ;
#134 PARENT_OPEN (
#134 NEW new
#134 TYPEID A
#134 PARENT_CLOSE )
#134 PERIOD .
#134 OBJECTID set_var
#134 PARENT_OPEN (
#134 OBJECTID x
#134 PARENT_CLOSE )
#134 SEMICOLON ;
#135 CURLY_CLOSE }
#136 PARENT_CLOSE )
#137 CURLY_CLOSE }
#137 SEMICOLON ;
#139 CURLY_CLOSE }
#139 SEMICOLON ;
#155 CLASS class
#155 TYPEID A2I
#155 CURLY_OPEN {
#157 OBJECTID c2i
#157 PARENT_OPEN (
#157 OBJECTID char
#157 COLON :
#157 TYPEID String
#157 PARENT_CLOSE )
#157 COLON :
#157 TYPEID Int
#157 CURLY_OPEN {
#158 IF if
#158 OBJECTID char
#158 EQ_OPERATOR =
#158 STRING_CONST 0
#158 THEN then
#158 INT_CONST 0
#158 ELSE else
#159 IF if
#159 OBJECTID char
#159 EQ_OPERATOR =
#159 STRING_CONST 1
#159 THEN then
#159 INT_CONST 1
#159 ELSE else
#160 IF if
#160 OBJECTID char
#160 EQ_OPERATOR =
#160 STRING_CONST 2
#160 THEN then
#160 INT_CONST 2
#160 ELSE else
#161 IF if
#161 OBJECTID char
#161 EQ_OPERATOR =
#161 STRING_CONST 3
#161 THEN then
#161 INT_CONST 3
#161 ELSE else
#162 IF if
#162 OBJECTID char
#162 EQ_OPERATOR =
#162 STRING_CONST 4
#162 THEN then
#162 INT_CONST 4
#162 ELSE else
#163 IF if
#163 OBJECTID char
#163 EQ_OPERATOR =
#163 STRING_CONST 5
#163 THEN then
#163 INT_CONST 5
#163 ELSE else
#164 IF if
#164 OBJECTID char
#164 EQ_OPERATOR =
#164 STRING_CONST 6
#164 THEN then
#164 INT_CONST 6
#164 ELSE else
#165 IF if
#165 OBJECTID char
#165 EQ_OPERATOR =
#165 STRING_CONST 7
#165 THEN then
#165 INT_CONST 7
#165 ELSE else
#166 IF if
#166 OBJECTID char
#166 EQ_OPERATOR =
#166 STRING_CONST 8
#166 THEN then
#166 INT_CONST 8
#166 ELSE else
#167 IF if
#167 OBJECTID char
#167 EQ_OPERATOR =
#167 STRING_CONST 9
#167 THEN then
#167 INT_CONST 9
#167 ELSE else
#168 CURLY_OPEN {
#168 OBJECTID abort
#168 PARENT_OPEN (
#168 PARENT_CLOSE )
#168 SEMICOLON ;
#168 INT_CONST 0
#168 SEMICOLON ;
#168 CURLY_CLOSE }
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#170 FI fi
#171 CURLY_CLOSE }
#171 SEMICOLON ;
#176 OBJECTID i2c
#176 PARENT_OPEN (
#176 OBJECTID i
#176 COLON :
#176 TYPEID Int
#176 PARENT_CLOSE )
#176 COLON :
#176 TYPEID String
#176 CURLY_OPEN {
#177 IF if
#177 OBJECTID i
#177 EQ_OPERATOR =
#177 INT_CONST 0
#177 THEN then
#177 STRING_CONST 0
#177 ELSE else
#178 IF if
#178 OBJECTID i
#178 EQ_OPERATOR =
#178 INT_CONST 1
#178 THEN then
#178 STRING_CONST 1
#178 ELSE else
#179 IF if
#179 OBJECTID i
#179 EQ_OPERATOR =
#179 INT_CONST 2
#179 THEN then
#179 STRING_CONST 2
#179 ELSE else
#180 IF if
#180 OBJECTID i
#180 EQ_OPERATOR =
#180 INT_CONST 3
#180 THEN then
#180 STRING_CONST 3
#180 ELSE else
#181 IF if
#181 OBJECTID i
#181 EQ_OPERATOR =
#181 INT_CONST 4
#181 THEN then
#181 STRING_CONST 4
#181 ELSE else
#182 IF if
#182 OBJECTID i
#182 EQ_OPERATOR =
#182 INT_CONST 5
#182 THEN then
#182 STRING_CONST 5
#182 ELSE else
#183 IF if
#183 OBJECTID i
#183 EQ_OPERATOR =
#183 INT_CONST 6
#183 THEN then
#183 STRING_CONST 6
#183 ELSE else
#184 IF if
#184 OBJECTID i
#184 EQ_OPERATOR =
#184 INT_CONST 7
#184 THEN then
#184 STRING_CONST 7
#184 ELSE else
#185 IF if
#185 OBJECTID i
#185 EQ_OPERATOR =
#185 INT_CONST 8
#185 THEN then
#185 STRING_CONST 8
#185 ELSE else
#186 IF if
#186 OBJECTID i
#186 EQ_OPERATOR =
#186 INT_CONST 9
#186 THEN then
#186 STRING_CONST 9
#186 ELSE else
#187 CURLY_OPEN {
#187 OBJECTID abort
#187 PARENT_OPEN (
#187 PARENT_CLOSE )
#187 SEMICOLON ;
#187 STRING_CONST 
#187 SEMICOLON ;
#187 CURLY_CLOSE }
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#188 FI fi
#189 CURLY_CLOSE }
#189 SEMICOLON ;
#199 OBJECTID a2i
#199 PARENT_OPEN (
#199 OBJECTID s
#199 COLON :
#199 TYPEID String
#199 PARENT_CLOSE )
#199 COLON :
#199 TYPEID Int
#199 CURLY_OPEN {
#200 IF if
#200 OBJECTID s
#200 PERIOD .
#200 OBJECTID length
#200 PARENT_OPEN (
#200 PARENT_CLOSE )
#200 EQ_OPERATOR =
#200 INT_CONST 0
#200 THEN then
#200 INT_CONST 0
#200 ELSE else
#201 IF if
#201 OBJECTID s
#201 PERIOD .
#201 OBJECTID substr
#201 PARENT_OPEN (
#201 INT_CONST 0
#201 COMMA ,
#201 INT_CONST 1
#201 PARENT_CLOSE )
#201 EQ_OPERATOR =
#201 STRING_CONST -
#201 THEN then
#201 INT_COMPLEMENT_OPERATOR ~
#201 OBJECTID a2i_aux
#201 PARENT_OPEN (
#201 OBJECTID s
#201 PERIOD .
#201 OBJECTID substr
#201 PARENT_OPEN (
#201 INT_CONST 1
#201 COMMA ,
#201 OBJECTID s
#201 PERIOD .
#201 OBJECTID length
#201 PARENT_OPEN (
#201 PARENT_CLOSE )
#201 INT_CONST -1
#201 PARENT_CLOSE )
#201 PARENT_CLOSE )
#201 ELSE else
#202 IF if
#202 OBJECTID s
#202 PERIOD .
#202 OBJECTID substr
#202 PARENT_OPEN (
#202 INT_CONST 0
#202 COMMA ,
#202 INT_CONST 1
#202 PARENT_CLOSE )
#202 EQ_OPERATOR =
#202 STRING_CONST +
#202 THEN then
#202 OBJECTID a2i_aux
#202 PARENT_OPEN (
#202 OBJECTID s
#202 PERIOD .
#202 OBJECTID substr
#202 PARENT_OPEN (
#202 INT_CONST 1
#202 COMMA ,
#202 OBJECTID s
#202 PERIOD .
#202 OBJECTID length
#202 PARENT_OPEN (
#202 PARENT_CLOSE )
#202 INT_CONST -1
#202 PARENT_CLOSE )
#202 PARENT_CLOSE )
#202 ELSE else
#203 OBJECTID a2i_aux
#203 PARENT_OPEN (
#203 OBJECTID s
#203 PARENT_CLOSE )
#204 FI fi
#204 FI fi
#204 FI fi
#205 CURLY_CLOSE }
#205 SEMICOLON ;
#211 OBJECTID a2i_aux
#211 PARENT_OPEN (
#211 OBJECTID s
#211 COLON :
#211 TYPEID String
#211 PARENT_CLOSE )
#211 COLON :
#211 TYPEID Int
#211 CURLY_OPEN {
#212 PARENT_OPEN (
#212 LET let
#212 OBJECTID int
#212 COLON :
#212 TYPEID Int
#212 ASSIGN_OPERATOR <-
#212 INT_CONST 0
#212 IN in
#213 CURLY_OPEN {
#214 PARENT_OPEN (
#214 LET let
#214 OBJECTID j
#214 COLON :
#214 TYPEID Int
#214 ASSIGN_OPERATOR <-
#214 OBJECTID s
#214 PERIOD .
#214 OBJECTID length
#214 PARENT_OPEN (
#214 PARENT_CLOSE )
#214 IN in
#215 PARENT_OPEN (
#215 LET let
#215 OBJECTID i
#215 COLON :
#215 TYPEID Int
#215 ASSIGN_OPERATOR <-
#215 INT_CONST 0
#215 IN in
#216 WHILE while
#216 OBJECTID i
#216 LESS_OPERATOR <
#216 OBJECTID j
#216 LOOP loop
#217 CURLY_OPEN {
#218 OBJECTID int
#218 ASSIGN_OPERATOR <-
#218 OBJECTID int
#218 MULT_OPERATOR *
#218 INT_CONST 10
#218 PLUS_OPERATOR +
#218 OBJECTID c2i
#218 PARENT_OPEN (
#218 OBJECTID s
#218 PERIOD .
#218 OBJECTID substr
#218 PARENT_OPEN (
#218 OBJECTID i
#218 COMMA ,
#218 INT_CONST 1
#218 PARENT_CLOSE )
#218 PARENT_CLOSE )
#218 SEMICOLON ;
#219 OBJECTID i
#219 ASSIGN_OPERATOR <-
#219 OBJECTID i
#219 PLUS_OPERATOR +
#219 INT_CONST 1
#219 SEMICOLON ;
#220 CURLY_CLOSE }
#221 POOL pool
#222 PARENT_CLOSE )
#223 PARENT_CLOSE )
#223 SEMICOLON ;
#224 OBJECTID int
#224 SEMICOLON ;
#225 CURLY_CLOSE }
#226 PARENT_CLOSE )
#227 CURLY_CLOSE }
#227 SEMICOLON ;
#232 OBJECTID i2a
#232 PARENT_OPEN (
#232 OBJECTID i
#232 COLON :
#232 TYPEID Int
#232 PARENT_CLOSE )
#232 COLON :
#232 TYPEID String
#232 CURLY_OPEN {
#233 IF if
#233 OBJECTID i
#233 EQ_OPERATOR =
#233 INT_CONST 0
#233 THEN then
#233 STRING_CONST 0
#233 ELSE else
#234 IF if
#234 INT_CONST 0
#234 LESS_OPERATOR <
#234 OBJECTID i
#234 THEN then
#234 OBJECTID i2a_aux
#234 PARENT_OPEN (
#234 OBJECTID i
#234 PARENT_CLOSE )
#234 ELSE else
#235 STRING_CONST -
#235 PERIOD .
#235 OBJECTID concat
#235 PARENT_OPEN (
#235 OBJECTID i2a_aux
#235 PARENT_OPEN (
#235 OBJECTID i
#235 MULT_OPERATOR *
#235 INT_COMPLEMENT_OPERATOR ~
#235 INT_CONST 1
#235 PARENT_CLOSE )
#235 PARENT_CLOSE )
#236 FI fi
#236 FI fi
#237 CURLY_CLOSE }
#237 SEMICOLON ;
#241 OBJECTID i2a_aux
#241 PARENT_OPEN (
#241 OBJECTID i
#241 COLON :
#241 TYPEID Int
#241 PARENT_CLOSE )
#241 COLON :
#241 TYPEID String
#241 CURLY_OPEN {
#242 IF if
#242 OBJECTID i
#242 EQ_OPERATOR =
#242 INT_CONST 0
#242 THEN then
#242 STRING_CONST 
#242 ELSE else
#243 PARENT_OPEN (
#243 LET let
#243 OBJECTID next
#243 COLON :
#243 TYPEID Int
#243 ASSIGN_OPERATOR <-
#243 OBJECTID i
#243 DIV_OPERATOR /
#243 INT_CONST 10
#243 IN in
#244 OBJECTID i2a_aux
#244 PARENT_OPEN (
#244 OBJECTID next
#244 PARENT_CLOSE )
#244 PERIOD .
#244 OBJECTID concat
#244 PARENT_OPEN (
#244 OBJECTID i2c
#244 PARENT_OPEN (
#244 OBJECTID i
#244 MINUS_OPERATOR -
#244 OBJECTID next
#244 MULT_OPERATOR *
#244 INT_CONST 10
#244 PARENT_CLOSE )
#244 PARENT_CLOSE )
#245 PARENT_CLOSE )
#246 FI fi
#247 CURLY_CLOSE }
#247 SEMICOLON ;
#249 CURLY_CLOSE }
#249 SEMICOLON ;
#251 CLASS class
#251 TYPEID Main
#251 INHERITS inherits
#251 TYPEID IO
#251 CURLY_OPEN {
#253 OBJECTID char
#253 COLON :
#253 TYPEID String
#253 SEMICOLON ;
#254 OBJECTID avar
#254 COLON :
#254 TYPEID A
#254 SEMICOLON ;
#255 OBJECTID a_var
#255 COLON :
#255 TYPEID A
#255 SEMICOLON ;
#256 OBJECTID flag
#256 COLON :
#256 TYPEID Bool
#256 ASSIGN_OPERATOR <-
#256 TRUE true
#256 SEMICOLON ;
#259 OBJECTID menu
#259 PARENT_OPEN (
#259 PARENT_CLOSE )
#259 COLON :
#259 TYPEID String
#259 CURLY_OPEN {
#260 CURLY_OPEN {
#261 OBJECTID out_string
#261 PARENT_OPEN (
#261 STRING_CONST 
	To add a number to 
#261 PARENT_CLOSE )
#261 SEMICOLON ;
#262 OBJECTID print
#262 PARENT_OPEN (
#262 OBJECTID avar
#262 PARENT_CLOSE )
#262 SEMICOLON ;
#263 OBJECTID out_string
#263 PARENT_OPEN (
#263 STRING_CONST ...enter a:

#263 PARENT_CLOSE )
#263 SEMICOLON ;
#264 OBJECTID out_string
#264 PARENT_OPEN (
#264 STRING_CONST 	To negate 
#264 PARENT_CLOSE )
#264 SEMICOLON ;
#265 OBJECTID print
#265 PARENT_OPEN (
#265 OBJECTID avar
#265 PARENT_CLOSE )
#265 SEMICOLON ;
#266 OBJECTID out_string
#266 PARENT_OPEN (
#266 STRING_CONST ...enter b:

#266 PARENT_CLOSE )
#266 SEMICOLON ;
#267 OBJECTID out_string
#267 PARENT_OPEN (
#267 STRING_CONST 	To find the difference between 
#267 PARENT_CLOSE )
#267 SEMICOLON ;
#268 OBJECTID print
#268 PARENT_OPEN (
#268 OBJECTID avar
#268 PARENT_CLOSE )
#268 SEMICOLON ;
#269 OBJECTID out_string
#269 PARENT_OPEN (
#269 STRING_CONST and another number...enter c:

#269 PARENT_CLOSE )
#269 SEMICOLON ;
#270 OBJECTID out_string
#270 PARENT_OPEN (
#270 STRING_CONST 	To find the factorial of 
#270 PARENT_CLOSE )
#270 SEMICOLON ;
#271 OBJECTID print
#271 PARENT_OPEN (
#271 OBJECTID avar
#271 PARENT_CLOSE )
#271 SEMICOLON ;
#272 OBJECTID out_string
#272 PARENT_OPEN (
#272 STRING_CONST ...enter d:

#272 PARENT_CLOSE )
#272 SEMICOLON ;
#273 OBJECTID out_string
#273 PARENT_OPEN (
#273 STRING_CONST 	To square 
#273 PARENT_CLOSE )
#273 SEMICOLON ;
#274 OBJECTID print
#274 PARENT_OPEN (
#274 OBJECTID avar
#274 PARENT_CLOSE )
#274 SEMICOLON ;
#275 OBJECTID out_string
#275 PARENT_OPEN (
#275 STRING_CONST ...enter e:

#275 PARENT_CLOSE )
#275 SEMICOLON ;
#276 OBJECTID out_string
#276 PARENT_OPEN (
#276 STRING_CONST 	To cube 
#276 PARENT_CLOSE )
#276 SEMICOLON ;
#277 OBJECTID print
#277 PARENT_OPEN (
#277 OBJECTID avar
#277 PARENT_CLOSE )
#277 SEMICOLON ;
#278 OBJECTID out_string
#278 PARENT_OPEN (
#278 STRING_CONST ...enter f:

#278 PARENT_CLOSE )
#278 SEMICOLON ;
#279 OBJECTID out_string
#279 PARENT_OPEN (
#279 STRING_CONST 	To find out if 
#279 PARENT_CLOSE )
#279 SEMICOLON ;
#280 OBJECTID print
#280 PARENT_OPEN (
#280 OBJECTID avar
#280 PARENT_CLOSE )
#280 SEMICOLON ;
#281 OBJECTID out_string
#281 PARENT_OPEN (
#281 STRING_CONST is a multiple of 3...enter g:

#281 PARENT_CLOSE )
#281 SEMICOLON ;
#282 OBJECTID out_string
#282 PARENT_OPEN (
#282 STRING_CONST 	To divide 
#282 PARENT_CLOSE )
#282 SEMICOLON ;
#283 OBJECTID print
#283 PARENT_OPEN (
#283 OBJECTID avar
#283 PARENT_CLOSE )
#283 SEMICOLON ;
#284 OBJECTID out_string
#284 PARENT_OPEN (
#284 STRING_CONST by 8...enter h:

#284 PARENT_CLOSE )
#284 SEMICOLON ;
#285 OBJECTID out_string
#285 PARENT_OPEN (
#285 STRING_CONST 	To get a new number...enter j:

#285 PARENT_CLOSE )
#285 SEMICOLON ;
#286 OBJECTID out_string
#286 PARENT_OPEN (
#286 STRING_CONST 	To quit...enter q:


#286 PARENT_CLOSE )
#286 SEMICOLON ;
#287 OBJECTID in_string
#287 PARENT_OPEN (
#287 PARENT_CLOSE )
#287 SEMICOLON ;
#288 CURLY_CLOSE }
#289 CURLY_CLOSE }
#289 SEMICOLON ;
#291 OBJECTID prompt
#291 PARENT_OPEN (
#291 PARENT_CLOSE )
#291 COLON :
#291 TYPEID String
#291 CURLY_OPEN {
#292 CURLY_OPEN {
#293 OBJECTID out_string
#293 PARENT_OPEN (
#293 STRING_CONST 

#293 PARENT_CLOSE )
#293 SEMICOLON ;
#294 OBJECTID out_string
#294 PARENT_OPEN (
#294 STRING_CONST Please enter a number...  
#294 PARENT_CLOSE )
#294 SEMICOLON ;
#295 OBJECTID in_string
#295 PARENT_OPEN (
#295 PARENT_CLOSE )
#295 SEMICOLON ;
#296 CURLY_CLOSE }
#297 CURLY_CLOSE }
#297 SEMICOLON ;
#299 OBJECTID get_int
#299 PARENT_OPEN (
#299 PARENT_CLOSE )
#299 COLON :
#299 TYPEID Int
#299 CURLY_OPEN {
#300 CURLY_OPEN {
#301 PARENT_OPEN (
#301 LET let
#301 OBJECTID z
#301 COLON :
#301 TYPEID A2I
#301 ASSIGN_OPERATOR <-
#301 NEW new
#301 TYPEID A2I
#301 IN in
#302 PARENT_OPEN (
#302 LET let
#302 OBJECTID s
#302 COLON :
#302 TYPEID String
#302 ASSIGN_OPERATOR <-
#302 OBJECTID prompt
#302 PARENT_OPEN (
#302 PARENT_CLOSE )
#302 IN in
#303 OBJECTID z
#303 PERIOD .
#303 OBJECTID a2i
#303 PARENT_OPEN (
#303 OBJECTID s
#303 PARENT_CLOSE )
#304 PARENT_CLOSE )
#305 PARENT_CLOSE )
#305 SEMICOLON ;
#306 CURLY_CLOSE }
#307 CURLY_CLOSE }
#307 SEMICOLON ;
#309 OBJECTID is_even
#309 PARENT_OPEN (
#309 OBJECTID num
#309 COLON :
#309 TYPEID Int
#309 PARENT_CLOSE )
#309 COLON :
#309 TYPEID Bool
#309 CURLY_OPEN {
#310 PARENT_OPEN (
#310 LET let
#310 OBJECTID x
#310 COLON :
#310 TYPEID Int
#310 ASSIGN_OPERATOR <-
#310 OBJECTID num
#310 IN in
#311 IF if
#311 OBJECTID x
#311 LESS_OPERATOR <
#311 INT_CONST 0
#311 THEN then
#311 OBJECTID is_even
#311 PARENT_OPEN (
#311 INT_COMPLEMENT_OPERATOR ~
#311 OBJECTID x
#311 PARENT_CLOSE )
#311 ELSE else
#312 IF if
#312 INT_CONST 0
#312 EQ_OPERATOR =
#312 OBJECTID x
#312 THEN then
#312 TRUE true
#312 ELSE else
#313 IF if
#313 INT_CONST 1
#313 EQ_OPERATOR =
#313 OBJECTID x
#313 THEN then
#313 FALSE false
#313 ELSE else
#314 OBJECTID is_even
#314 PARENT_OPEN (
#314 OBJECTID x
#314 MINUS_OPERATOR -
#314 INT_CONST 2
#314 PARENT_CLOSE )
#315 FI fi
#315 FI fi
#315 FI fi
#316 PARENT_CLOSE )
#317 CURLY_CLOSE }
#317 SEMICOLON ;
#319 OBJECTID class_type
#319 PARENT_OPEN (
#319 OBJECTID var
#319 COLON :
#319 TYPEID A
#319 PARENT_CLOSE )
#319 COLON :
#319 TYPEID SELF_TYPE
#319 CURLY_OPEN {
#320 CASE case
#320 OBJECTID var
#320 OF of
#321 OBJECTID a
#321 COLON :
#321 TYPEID A
#321 RIGHTARROW =>
#321 OBJECTID out_string
#321 PARENT_OPEN (
#321 STRING_CONST Class type is now A

#321 PARENT_CLOSE )
#321 SEMICOLON ;
#322 OBJECTID b
#322 COLON :
#322 TYPEID B
#322 RIGHTARROW =>
#322 OBJECTID out_string
#322 PARENT_OPEN (
#322 STRING_CONST Class type is now B

#322 PARENT_CLOSE )
#322 SEMICOLON ;
#323 OBJECTID c
#323 COLON :
#323 TYPEID C
#323 RIGHTARROW =>
#323 OBJECTID out_string
#323 PARENT_OPEN (
#323 STRING_CONST Class type is now C

#323 PARENT_CLOSE )
#323 SEMICOLON ;
#324 OBJECTID d
#324 COLON :
#324 TYPEID D
#324 RIGHTARROW =>
#324 OBJECTID out_string
#324 PARENT_OPEN (
#324 STRING_CONST Class type is now D

#324 PARENT_CLOSE )
#324 SEMICOLON ;
#325 OBJECTID e
#325 COLON :
#325 TYPEID E
#325 RIGHTARROW =>
#325 OBJECTID out_string
#325 PARENT_OPEN (
#325 STRING_CONST Class type is now E

#325 PARENT_CLOSE )
#325 SEMICOLON ;
#326 OBJECTID o
#326 COLON :
#326 TYPEID Object
#326 RIGHTARROW =>
#326 OBJECTID out_string
#326 PARENT_OPEN (
#326 STRING_CONST Oooops

#326 PARENT_CLOSE )
#326 SEMICOLON ;
#327 ESAC esac
#328 CURLY_CLOSE }
#328 SEMICOLON ;
#330 OBJECTID print
#330 PARENT_OPEN (
#330 OBJECTID var
#330 COLON :
#330 TYPEID A
#330 PARENT_CLOSE )
#330 COLON :
#330 TYPEID SELF_TYPE
#330 CURLY_OPEN {
#331 PARENT_OPEN (
#331 LET let
#331 OBJECTID z
#331 COLON :
#331 TYPEID A2I
#331 ASSIGN_OPERATOR <-
#331 NEW new
#331 TYPEID A2I
#331 IN in
#332 CURLY_OPEN {
#333 OBJECTID out_string
#333 PARENT_OPEN (
#333 OBJECTID z
#333 PERIOD .
#333 OBJECTID i2a
#333 PARENT_OPEN (
#333 OBJECTID var
#333 PERIOD .
#333 OBJECTID value
#333 PARENT_OPEN (
#333 PARENT_CLOSE )
#333 PARENT_CLOSE )
#333 PARENT_CLOSE )
#333 SEMICOLON ;
#334 OBJECTID out_string
#334 PARENT_OPEN (
#334 STRING_CONST  
#334 PARENT_CLOSE )
#334 SEMICOLON ;
#335 CURLY_CLOSE }
#336 PARENT_CLOSE )
#337 CURLY_CLOSE }
#337 SEMICOLON ;
#339 OBJECTID main
#339 PARENT_OPEN (
#339 PARENT_CLOSE )
#339 COLON :
#339 TYPEID Object
#339 CURLY_OPEN {
#340 CURLY_OPEN {
#341 OBJECTID avar
#341 ASSIGN_OPERATOR <-
#341 PARENT_OPEN (
#341 NEW new
#341 TYPEID A
#341 PARENT_CLOSE )
#341 SEMICOLON ;
#342 WHILE while
#342 OBJECTID flag
#342 LOOP loop
#343 CURLY_OPEN {
#345 OBJECTID out_string
#345 PARENT_OPEN (
#345 STRING_CONST number 
#345 PARENT_CLOSE )
#345 SEMICOLON ;
#346 OBJECTID print
#346 PARENT_OPEN (
#346 OBJECTID avar
#346 PARENT_CLOSE )
#346 SEMICOLON ;
#347 IF if
#347 OBJECTID is_even
#347 PARENT_OPEN (
#347 OBJECTID avar
#347 PERIOD .
#347 OBJECTID value
#347 PARENT_OPEN (
#347 PARENT_CLOSE )
#347 PARENT_CLOSE )
#347 THEN then
#348 OBJECTID out_string
#348 PARENT_OPEN (
#348 STRING_CONST is even!

#348 PARENT_CLOSE )
#349 ELSE else
#350 OBJECTID out_string
#350 PARENT_OPEN (
#350 STRING_CONST is odd!

#350 PARENT_CLOSE )
#351 FI fi
#351 SEMICOLON ;
#353 OBJECTID class_type
#353 PARENT_OPEN (
#353 OBJECTID avar
#353 PARENT_CLOSE )
#353 SEMICOLON ;
#354 OBJECTID char
#354 ASSIGN_OPERATOR <-
#354 OBJECTID menu
#354 PARENT_OPEN (
#354 PARENT_CLOSE )
#354 SEMICOLON ;
#355 IF if
#355 OBJECTID char
#355 EQ_OPERATOR =
#355 STRING_CONST a
#355 THEN then
#356 CURLY_OPEN {
#357 OBJECTID a_var
#357 ASSIGN_OPERATOR <-
#357 PARENT_OPEN (
#357 NEW new
#357 TYPEID A
#357 PARENT_CLOSE )
#357 PERIOD .
#357 OBJECTID set_var
#357 PARENT_OPEN (
#357 OBJECTID get_int
#357 PARENT_OPEN (
#357 PARENT_CLOSE )
#357 PARENT_CLOSE )
#357 SEMICOLON ;
#358 OBJECTID avar
#358 ASSIGN_OPERATOR <-
#358 PARENT_OPEN (
#358 NEW new
#358 TYPEID B
#358 PARENT_CLOSE )
#358 PERIOD .
#358 OBJECTID method2
#358 PARENT_OPEN (
#358 OBJECTID avar
#358 PERIOD .
#358 OBJECTID value
#358 PARENT_OPEN (
#358 PARENT_CLOSE )
#358 COMMA ,
#358 OBJECTID a_var
#358 PERIOD .
#358 OBJECTID value
#358 PARENT_OPEN (
#358 PARENT_CLOSE )
#358 PARENT_CLOSE )
#358 SEMICOLON ;
#359 CURLY_CLOSE }
#359 ELSE else
#360 IF if
#360 OBJECTID char
#360 EQ_OPERATOR =
#360 STRING_CONST b
#360 THEN then
#361 CASE case
#361 OBJECTID avar
#361 OF of
#362 OBJECTID c
#362 COLON :
#362 TYPEID C
#362 RIGHTARROW =>
#362 OBJECTID avar
#362 ASSIGN_OPERATOR <-
#362 OBJECTID c
#362 PERIOD .
#362 OBJECTID method6
#362 PARENT_OPEN (
#362 OBJECTID c
#362 PERIOD .
#362 OBJECTID value
#362 PARENT_OPEN (
#362 PARENT_CLOSE )
#362 PARENT_CLOSE )
#362 SEMICOLON ;
#363 OBJECTID a
#363 COLON :
#363 TYPEID A
#363 RIGHTARROW =>
#363 OBJECTID avar
#363 ASSIGN_OPERATOR <-
#363 OBJECTID a
#363 PERIOD .
#363 OBJECTID method3
#363 PARENT_OPEN (
#363 OBJECTID a
#363 PERIOD .
#363 OBJECTID value
#363 PARENT_OPEN (
#363 PARENT_CLOSE )
#363 PARENT_CLOSE )
#363 SEMICOLON ;
#364 OBJECTID o
#364 COLON :
#364 TYPEID Object
#364 RIGHTARROW =>
#364 CURLY_OPEN {
#365 OBJECTID out_string
#365 PARENT_OPEN (
#365 STRING_CONST Oooops

#365 PARENT_CLOSE )
#365 SEMICOLON ;
#366 OBJECTID abort
#366 PARENT_OPEN (
#366 PARENT_CLOSE )
#366 SEMICOLON ;
#366 INT_CONST 0
#366 SEMICOLON ;
#367 CURLY_CLOSE }
#367 SEMICOLON ;
#368 ESAC esac
#368 ELSE else
#369 IF if
#369 OBJECTID char
#369 EQ_OPERATOR =
#369 STRING_CONST c
#369 THEN then
#370 CURLY_OPEN {
#371 OBJECTID a_var
#371 ASSIGN_OPERATOR <-
#371 PARENT_OPEN (
#371 NEW new
#371 TYPEID A
#371 PARENT_CLOSE )
#371 PERIOD .
#371 OBJECTID set_var
#371 PARENT_OPEN (
#371 OBJECTID get_int
#371 PARENT_OPEN (
#371 PARENT_CLOSE )
#371 PARENT_CLOSE )
#371 SEMICOLON ;
#372 OBJECTID avar
#372 ASSIGN_OPERATOR <-
#372 PARENT_OPEN (
#372 NEW new
#372 TYPEID D
#372 PARENT_CLOSE )
#372 PERIOD .
#372 OBJECTID method4
#372 PARENT_OPEN (
#372 OBJECTID avar
#372 PERIOD .
#372 OBJECTID value
#372 PARENT_OPEN (
#372 PARENT_CLOSE )
#372 COMMA ,
#372 OBJECTID a_var
#372 PERIOD .
#372 OBJECTID value
#372 PARENT_OPEN (
#372 PARENT_CLOSE )
#372 PARENT_CLOSE )
#372 SEMICOLON ;
#373 CURLY_CLOSE }
#373 ELSE else
#374 IF if
#374 OBJECTID char
#374 EQ_OPERATOR =
#374 STRING_CONST d
#374 THEN then
#374 OBJECTID avar
#374 ASSIGN_OPERATOR <-
#374 PARENT_OPEN (
#374 NEW new
#374 TYPEID C
#374 PARENT_CLOSE )
#374 AT @
#374 TYPEID A
#374 PERIOD .
#374 OBJECTID method5
#374 PARENT_OPEN (
#374 OBJECTID avar
#374 PERIOD .
#374 OBJECTID value
#374 PARENT_OPEN (
#374 PARENT_CLOSE )
#374 PARENT_CLOSE )
#374 ELSE else
#376 IF if
#376 OBJECTID char
#376 EQ_OPERATOR =
#376 STRING_CONST e
#376 THEN then
#376 OBJECTID avar
#376 ASSIGN_OPERATOR <-
#376 PARENT_OPEN (
#376 NEW new
#376 TYPEID C
#376 PARENT_CLOSE )
#376 AT @
#376 TYPEID B
#376 PERIOD .
#376 OBJECTID method5
#376 PARENT_OPEN (
#376 OBJECTID avar
#376 PERIOD .
#376 OBJECTID value
#376 PARENT_OPEN (
#376 PARENT_CLOSE )
#376 PARENT_CLOSE )
#376 ELSE else
#378 IF if
#378 OBJECTID char
#378 EQ_OPERATOR =
#378 STRING_CONST f
#378 THEN then
#378 OBJECTID avar
#378 ASSIGN_OPERATOR <-
#378 PARENT_OPEN (
#378 NEW new
#378 TYPEID C
#378 PARENT_CLOSE )
#378 AT @
#378 TYPEID C
#378 PERIOD .
#378 OBJECTID method5
#378 PARENT_OPEN (
#378 OBJECTID avar
#378 PERIOD .
#378 OBJECTID value
#378 PARENT_OPEN (
#378 PARENT_CLOSE )
#378 PARENT_CLOSE )
#378 ELSE else
#380 IF if
#380 OBJECTID char
#380 EQ_OPERATOR =
#380 STRING_CONST g
#380 THEN then
#381 IF if
#381 PARENT_OPEN (
#381 PARENT_OPEN (
#381 NEW new
#381 TYPEID D
#381 PARENT_CLOSE )
#381 PERIOD .
#381 OBJECTID method7
#381 PARENT_OPEN (
#381 OBJECTID avar
#381 PERIOD .
#381 OBJECTID value
#381 PARENT_OPEN (
#381 PARENT_CLOSE )
#381 PARENT_CLOSE )
#381 PARENT_CLOSE )
#382 THEN then
#383 CURLY_OPEN {
#384 OBJECTID out_string
#384 PARENT_OPEN (
#384 STRING_CONST number 
#384 PARENT_CLOSE )
#384 SEMICOLON ;
#385 OBJECTID print
#385 PARENT_OPEN (
#385 OBJECTID avar
#385 PARENT_CLOSE )
#385 SEMICOLON ;
#386 OBJECTID out_string
#386 PARENT_OPEN (
#386 STRING_CONST is divisible by 3.

#386 PARENT_CLOSE )
#386 SEMICOLON ;
#387 CURLY_CLOSE }
#388 ELSE else
#389 CURLY_OPEN {
#390 OBJECTID out_string
#390 PARENT_OPEN (
#390 STRING_CONST number 
#390 PARENT_CLOSE )
#390 SEMICOLON ;
#391 OBJECTID print
#391 PARENT_OPEN (
#391 OBJECTID avar
#391 PARENT_CLOSE )
#391 SEMICOLON ;
#392 OBJECTID out_string
#392 PARENT_OPEN (
#392 STRING_CONST is not divisible by 3.

#392 PARENT_CLOSE )
#392 SEMICOLON ;
#393 CURLY_CLOSE }
#394 FI fi
#394 ELSE else
#395 IF if
#395 OBJECTID char
#395 EQ_OPERATOR =
#395 STRING_CONST h
#395 THEN then
#396 PARENT_OPEN (
#396 LET let
#396 OBJECTID x
#396 COLON :
#396 TYPEID A
#396 IN in
#397 CURLY_OPEN {
#398 OBJECTID x
#398 ASSIGN_OPERATOR <-
#398 PARENT_OPEN (
#398 NEW new
#398 TYPEID E
#398 PARENT_CLOSE )
#398 PERIOD .
#398 OBJECTID method6
#398 PARENT_OPEN (
#398 OBJECTID avar
#398 PERIOD .
#398 OBJECTID value
#398 PARENT_OPEN (
#398 PARENT_CLOSE )
#398 PARENT_CLOSE )
#398 SEMICOLON ;
#399 PARENT_OPEN (
#399 LET let
#399 OBJECTID r
#399 COLON :
#399 TYPEID Int
#399 ASSIGN_OPERATOR <-
#399 PARENT_OPEN (
#399 OBJECTID avar
#399 PERIOD .
#399 OBJECTID value
#399 PARENT_OPEN (
#399 PARENT_CLOSE )
#399 MINUS_OPERATOR -
#399 PARENT_OPEN (
#399 OBJECTID x
#399 PERIOD .
#399 OBJECTID value
#399 PARENT_OPEN (
#399 PARENT_CLOSE )
#399 MULT_OPERATOR *
#399 INT_CONST 8
#399 PARENT_CLOSE )
#399 PARENT_CLOSE )
#399 IN in
#400 CURLY_OPEN {
#401 OBJECTID out_string
#401 PARENT_OPEN (
#401 STRING_CONST number 
#401 PARENT_CLOSE )
#401 SEMICOLON ;
#402 OBJECTID print
#402 PARENT_OPEN (
#402 OBJECTID avar
#402 PARENT_CLOSE )
#402 SEMICOLON ;
#403 OBJECTID out_string
#403 PARENT_OPEN (
#403 STRING_CONST is equal to 
#403 PARENT_CLOSE )
#403 SEMICOLON ;
#404 OBJECTID print
#404 PARENT_OPEN (
#404 OBJECTID x
#404 PARENT_CLOSE )
#404 SEMICOLON ;
#405 OBJECTID out_string
#405 PARENT_OPEN (
#405 STRING_CONST times 8 with a remainder of 
#405 PARENT_CLOSE )
#405 SEMICOLON ;
#406 PARENT_OPEN (
#406 LET let
#406 OBJECTID a
#406 COLON :
#406 TYPEID A2I
#406 ASSIGN_OPERATOR <-
#406 NEW new
#406 TYPEID A2I
#406 IN in
#407 CURLY_OPEN {
#408 OBJECTID out_string
#408 PARENT_OPEN (
#408 OBJECTID a
#408 PERIOD .
#408 OBJECTID i2a
#408 PARENT_OPEN (
#408 OBJECTID r
#408 PARENT_CLOSE )
#408 PARENT_CLOSE )
#408 SEMICOLON ;
#409 OBJECTID out_string
#409 PARENT_OPEN (
#409 STRING_CONST 

#409 PARENT_CLOSE )
#409 SEMICOLON ;
#410 CURLY_CLOSE }
#411 PARENT_CLOSE )
#411 SEMICOLON ;
#412 CURLY_CLOSE }
#413 PARENT_CLOSE )
#413 SEMICOLON ;
#414 OBJECTID avar
#414 ASSIGN_OPERATOR <-
#414 OBJECTID x
#414 SEMICOLON ;
#415 CURLY_CLOSE }
#416 PARENT_CLOSE )
#417 ELSE else
#418 IF if
#418 OBJECTID char
#418 EQ_OPERATOR =
#418 STRING_CONST j
#418 THEN then
#418 OBJECTID avar
#418 ASSIGN_OPERATOR <-
#418 PARENT_OPEN (
#418 NEW new
#418 TYPEID A
#418 PARENT_CLOSE )
#419 ELSE else
#420 IF if
#420 OBJECTID char
#420 EQ_OPERATOR =
#420 STRING_CONST q
#420 THEN then
#420 OBJECTID flag
#420 ASSIGN_OPERATOR <-
#420 FALSE false
#421 ELSE else
#422 OBJECTID avar
#422 ASSIGN_OPERATOR <-
#422 PARENT_OPEN (
#422 NEW new
#422 TYPEID A
#422 PARENT_CLOSE )
#422 PERIOD .
#422 OBJECTID method1
#422 PARENT_OPEN (
#422 OBJECTID avar
#422 PERIOD .
#422 OBJECTID value
#422 PARENT_OPEN (
#422 PARENT_CLOSE )
#422 PARENT_CLOSE )
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 FI fi
#423 SEMICOLON ;
#424 CURLY_CLOSE }
#425 POOL pool
#425 SEMICOLON ;
#426 CURLY_CLOSE }
#427 CURLY_CLOSE }
#427 SEMICOLON ;
#429 CURLY_CLOSE }
#429 SEMICOLON ;
#431 EOF <EOF>
